import numpy as np
import random
import json
import os
import ast  # ‚úÖ ‡πÉ‡∏ä‡πâ ast.literal_eval ‡πÅ‡∏ó‡∏ô eval ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
import glob
import pandas as pd
from collections import deque

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î Grid (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
GRID_ROWS = 4
GRID_COLS = 4
EPISODES = 10000  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
ALPHA = 0.3  # Learning Rate
GAMMA = 0.9  # Discount Factor

# ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
SCORES = {'E': 10, 'G': 10, 'H': 15, 'R': 5, '0': 0}

Q_TABLE_FILE = "q_table.json"

# ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á E (1-based index)
E_START_POSITION = (1, 1)

# ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå goodcsv
csv_files = glob.glob(r"C:\Users\USER\Desktop\AI_Housing_Project\data\maps\CSV\goodcsv\**\*.csv")

def load_or_initialize_grid(csv_folder, rows, cols, e_start_position):
    """
    ‡πÇ‡∏´‡∏•‡∏î Grid ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
    """
    print("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå CSV...")
    csv_files = glob.glob(f"{csv_folder}/**/*.csv", recursive=True)

    if not csv_files:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô...")
        return initialize_grid(rows, cols, e_start_position)

    all_dataframes = []  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    best_match_df = None  # ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

    # ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞ `E` ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    for file in csv_files:
        df = pd.read_csv(file, header=None, nrows=rows)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß
        grid = df.astype(str).values.tolist()  # ‡πÅ‡∏õ‡∏•‡∏á CSV ‡πÄ‡∏õ‡πá‡∏ô Grid

        actual_rows, actual_cols = df.shape  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô CSV
        # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á `E` ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Grid ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å CSV
        e_found = [(r, c) for r in range(len(grid)) for c in range(len(grid[0])) if grid[r][c] == 'E']

        if e_found:
            # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å `E` ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ `E_START_POSITION` ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            closest_e = min(
                e_found, 
                key=lambda pos: abs(pos[0] - (e_start_position[0] - 1)) + abs(pos[1] - (e_start_position[1] - 1))
            )

            # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á `E` ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö `E_START_POSITION` ‚Üí ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà `E_START_POSITION`
            if closest_e != (e_start_position[0]-1, e_start_position[1]-1):
                print(f"‚ö†Ô∏è `E` ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {closest_e} ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ {e_start_position}")
                
                # ‡∏•‡∏ö `E` ‡πÄ‡∏î‡∏¥‡∏°
                grid[closest_e[0]][closest_e[1]] = '0'
                
                # ‡∏ß‡∏≤‡∏á `E` ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                grid[e_start_position[0]-1][e_start_position[1]-1] = 'E'

            return grid  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Grid ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ï‡πà `E` ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if (actual_rows, actual_cols) == (rows, cols):
            print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå {file} ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà `E` ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£!")
            all_dataframes.append(df)

        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
        elif abs(actual_rows - rows) <= 1 and abs(actual_cols - cols) <= 1:
            if best_match_df is None or (abs(actual_rows - rows) + abs(actual_cols - cols) <
                             abs(best_match_df.shape[0] - rows) + abs(best_match_df.shape[1] - cols)):
                best_match_df = df

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞ `E` ‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á ‚Üí ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ó‡∏ô
    if all_dataframes:
        grid_df = all_dataframes[0]  # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á
        print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ({grid_df.shape}) ‡πÅ‡∏ï‡πà `E` ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
        return grid_df.astype(str).values.tolist()

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢ ‚Üí ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
    if best_match_df is not None:
        print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ({best_match_df.shape})")
        return best_match_df.astype(str).values.tolist()

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÉ‡∏´‡∏°‡πà
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Ç‡∏ô‡∏≤‡∏î! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô...")
    return initialize_grid(rows, cols, e_start_position)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢ E ‡πÑ‡∏õ‡∏Ç‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
def initialize_grid(rows, cols, e_position=E_START_POSITION):
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á E ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (1-based index) """
    grid = [['0' for _ in range(cols)] for _ in range(rows)]  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏ß‡πà‡∏≤‡∏á

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å 1-based index ‡πÄ‡∏õ‡πá‡∏ô 0-based index
    r, c = e_position
    r, c = r - 1, c - 1  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö index ‡πÉ‡∏ô Python

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ E ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:
        grid[r][c] = 'E'  # ‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
    else:
        print("‚ö†Ô∏è E ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...")

        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏Ç‡∏≠‡∏á Grid ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏õ‡πä‡∏∞)
        candidate_positions = []
        if r < rows - 1:
            candidate_positions.append((rows - 1, c))  # ‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏¥‡∏°
        if c < cols - 1:
            candidate_positions.append((r, cols - 1))  # ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏¥‡∏°

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        if candidate_positions:
            r, c = random.choice(candidate_positions)
        
        grid[r][c] = 'E'

    return grid

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î Q-Table ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
def load_q_table(filepath=Q_TABLE_FILE):
    """ ‡πÇ‡∏´‡∏•‡∏î Q-Table ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Key Format """
    if not os.path.exists(filepath):
        print("‚ö†Ô∏è Q-Table file not found. Creating a new Q-Table...")
        return {}  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Q-Table ‡∏ß‡πà‡∏≤‡∏á ‡πÜ
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è JSON Decode Error: The file may be corrupted. Resetting Q-Table...")
        return {}
    except Exception as e:
        print(f"‚ö†Ô∏è Unexpected Error while loading JSON: {e}")
        return {}

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Q-Table
def save_q_table(q_table, filepath=Q_TABLE_FILE):
    """ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Q-Table ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON """
    try:
        with open(filepath, "w", encoding="utf-8") as f:
            json.dump(q_table, f, indent=4)
    except Exception as e:
        print(f"‚ö†Ô∏è Error while saving Q-Table: {e}")

# ‡πÇ‡∏´‡∏•‡∏î Q-Table
q_table = load_q_table()

def count_r_clusters(grid):
    """ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á 'R' ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô """
    visited = set()
    clusters = 0

    def bfs(r, c):
        queue = deque([(r, c)])
        visited.add((r, c))
        while queue:
            x, y = queue.popleft()
            for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:  # 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
                nx, ny = x + dx, y + dy
                if 0 <= nx < GRID_ROWS and 0 <= ny < GRID_COLS and (nx, ny) not in visited and grid[nx][ny] == 'R':
                    visited.add((nx, ny))
                    queue.append((nx, ny))

    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'R' and (r, c) not in visited:
                clusters += 1
                bfs(r, c)
    
    return clusters

# 4Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
def calculate_reward_verbose(grid):

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á E ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Grid
    e_row, e_col = None, None
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'E':
                e_row, e_col = r + 1, c + 1  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á (1-based index)
                break
        if e_row is not None:
            break  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ E ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

    # ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö E ‡πÉ‡∏ô Grid ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if e_row is None or e_col is None:
        print("‚ö†Ô∏è WARNING: ‡πÑ‡∏°‡πà‡∏û‡∏ö E ‡πÉ‡∏ô Grid! ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (1,1)")
        e_row, e_col = 1, 1

    # 1Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    base_score = sum(SCORES[grid[r][c]] for r in range(GRID_ROWS) for c in range(GRID_COLS) if grid[r][c] in SCORES)
    print(f"üîπ Base Score: {base_score}")

    # 2Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
    bonus = 0  

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô "HHH" ‡πÅ‡∏•‡∏∞ "RRR" (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS - 2):
            if grid[r][c] == 'H' and grid[r][c+1] == 'H' and grid[r][c+2] == 'H':
                bonus += 20
                print(f"‚úÖ ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô HHH ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {r}, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {c}-{c+2} (+20)")
            if grid[r][c] == 'R' and grid[r][c+1] == 'R' and grid[r][c+2] == 'R':
                bonus += 20
                print(f"‚úÖ ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô RRR ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {r}, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {c}-{c+2} (+20)")

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô "H R H" ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
    for c in range(GRID_COLS):
        for r in range(GRID_ROWS - 2):
            if grid[r][c] == 'H' and grid[r+1][c] == 'R' and grid[r+2][c] == 'H':
                bonus += 20
                print(f"‚úÖ ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô H R H ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {c}, ‡πÅ‡∏ñ‡∏ß {r}-{r+2} (+20)")

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô HH ‡∏ö‡∏ô RR ‡πÅ‡∏•‡∏∞ RR ‡∏ö‡∏ô HH
    for r in range(GRID_ROWS - 1):
        for c in range(GRID_COLS - 1):
            if (grid[r][c] == 'H' and grid[r][c+1] == 'H' and grid[r+1][c] == 'R' and grid[r+1][c+1] == 'R'):
                bonus += 20
                print(f"‚úÖ ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô HH ‡∏ö‡∏ô RR ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {r}-{r+1}, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {c}-{c+1} (+20)")
            if (grid[r][c] == 'R' and grid[r][c+1] == 'R' and grid[r+1][c] == 'H' and grid[r+1][c+1] == 'H'):
                bonus += 20
                print(f"‚úÖ ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô RR ‡∏ö‡∏ô HH ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {r}-{r+1}, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {c}-{c+1} (+20)")

    print(f"üèÜ Bonus Score: {bonus}")

    # 3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ú‡∏¥‡∏î‡∏Å‡∏é (Penalty)
    penalty = 0

    # ‚ùå ‡πÄ‡∏ä‡πá‡∏Ñ H ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏¥‡∏î E (‡∏´‡∏±‡∏Å -50 ‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î E)
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'H':
                if (r > 0 and grid[r-1][c] == 'E') or (r < GRID_ROWS-1 and grid[r+1][c] == 'E') or \
                   (c > 0 and grid[r][c-1] == 'E') or (c < GRID_COLS-1 and grid[r][c+1] == 'E'):
                    penalty -= 50
                    print(f"‚ùå ‡∏û‡∏ö H ‡∏ï‡∏¥‡∏î E ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {r}, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {c} (-50)")
    
    # ‚ùå ‡πÄ‡∏ä‡πá‡∏Ñ E ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R ‡πÄ‡∏•‡∏¢ = -100
    e_has_r_neighbor = False
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'E':
                if (r > 0 and grid[r-1][c] == 'R') or (r < GRID_ROWS-1 and grid[r+1][c] == 'R') or \
                   (c > 0 and grid[r][c-1] == 'R') or (c < GRID_COLS-1 and grid[r][c+1] == 'R'):
                    e_has_r_neighbor = True
    if not e_has_r_neighbor:
        penalty -= 100
        print(f"‚ùå ‡∏û‡∏ö R ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î E ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {e_row}, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {e_col} (-100)")

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö H ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R (‡∏´‡∏±‡∏Å -50 ‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R)
    h_not_touching_r = 0  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô H ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'H':
                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ H ‡∏°‡∏µ R ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                has_r_neighbor = (
                    (r > 0 and grid[r-1][c] == 'R') or  # ‡∏ö‡∏ô
                    (r < GRID_ROWS-1 and grid[r+1][c] == 'R') or  # ‡∏•‡πà‡∏≤‡∏á
                    (c > 0 and grid[r][c-1] == 'R') or  # ‡∏ã‡πâ‡∏≤‡∏¢
                    (c < GRID_COLS-1 and grid[r][c+1] == 'R')  # ‡∏Ç‡∏ß‡∏≤
                )
                if not has_r_neighbor:  # ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ R ‡∏ï‡∏¥‡∏î‡πÄ‡∏•‡∏¢
                    h_not_touching_r += 1
                    penalty -= 50  # ‡∏´‡∏±‡∏Å -50 ‡∏ï‡πà‡∏≠ H ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R
                    print(f"‚ùå H ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {r+1}, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {c+1} ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R (-50)")
    print(f"üö® ‡∏û‡∏ö H ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {h_not_touching_r} ‡∏ï‡∏±‡∏ß (-{h_not_touching_r * 50})")

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏° `R` ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    r_clusters = count_r_clusters(grid)
    if r_clusters > 1:
        penalty -= 100 * (r_clusters - 1)  
        print(f"‚ùå ‡∏û‡∏ö `R` ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô {r_clusters} ‡∏Å‡∏•‡∏∏‡πà‡∏° (-100 ‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°)")

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ö‡∏ô‡∏±‡∏™ G ‡πÅ‡∏•‡∏∞ R ‡∏ï‡∏¥‡∏î E
    additional_bonus = 0
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'G':
                if (r > 0 and grid[r-1][c] == 'E') or (r < GRID_ROWS-1 and grid[r+1][c] == 'E') or \
                (c > 0 and grid[r][c-1] == 'E') or (c < GRID_COLS-1 and grid[r][c+1] == 'E'):
                    additional_bonus += 10
                    print(f"‚úÖ ‡∏û‡∏ö G ‡∏ï‡∏¥‡∏î E ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {r}, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {c} (+10)")
            if grid[r][c] == 'R':
                if (r > 0 and grid[r-1][c] == 'E') or (r < GRID_ROWS-1 and grid[r+1][c] == 'E') or \
                (c > 0 and grid[r][c-1] == 'E') or (c < GRID_COLS-1 and grid[r][c+1] == 'E'):
                    additional_bonus += 5
                    print(f"‚úÖ ‡∏û‡∏ö R ‡∏ï‡∏¥‡∏î E ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {r}, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {c} (+5)")

    if all(cell != '0' for row in grid for cell in row):
        total_reward += 50  # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ñ‡πâ‡∏≤ Grid ‡πÄ‡∏ï‡πá‡∏°

    print(f"üíé Extra Bonus Score: {additional_bonus}")

    # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    final_score = base_score + bonus + penalty + additional_bonus
    print(f"üèÅ Final Score: {final_score}")
    return final_score

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (‡∏ß‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏ô Grid)
def choose_action(grid):
    """ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏á‡πÉ‡∏ô Grid """
    
    # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á State ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Grid ‡πÄ‡∏õ‡πá‡∏ô JSON (‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Q-Table)
    state_str = json.dumps(grid)

    # üîπ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Q-Table ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Q-Table
    if state_str in q_table:
        action_str = max(q_table[state_str], key=q_table[state_str].get)  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å action ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        print(f"üìä AI ‡πÉ‡∏ä‡πâ Q-Table: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {action_str} ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {q_table[state_str][action_str]}")
        return ast.literal_eval(action_str)  # ‡πÅ‡∏õ‡∏•‡∏á string ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô tuple (r, c, char)

    # üîπ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Q-Table ‚Üí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    empty_cells = [(r, c) for r in range(GRID_ROWS) for c in range(GRID_COLS) if grid[r][c] == '0']

    if not empty_cells:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£!")
        return None  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ

    r, c = random.choice(empty_cells)  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    char = random.choice(['H', 'R', 'G'])  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    print(f"üõ† AI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏≤‡∏á {char} ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ({r},{c})")
    return r, c, char  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Q-Table
def update_q_table(state, action, reward, next_state):
    state_str = json.dumps(state)
    action_str = str(tuple(action))
    next_state_str = json.dumps(next_state)
    
    if state_str not in q_table or not q_table[state_str]:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Q-Table ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        q_table[state_str] = {}
    if action_str in q_table[state_str]:

        max_future_q = max(q_table.get(next_state_str, {}).values() or [0])
        q_table[state_str][action_str] = (1 - ALPHA) * q_table[state_str][action_str] + ALPHA * (reward + GAMMA * max_future_q)

def train_ai(episodes, grid_rows, grid_cols, csv_files):
    """
    ‡∏ù‡∏∂‡∏Å AI ‡∏î‡πâ‡∏ß‡∏¢ Reinforcement Learning (Q-Learning)
    :param episodes: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å
    :param grid_rows: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á Grid
    :param grid_cols: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á Grid
    :return: best_grid, best_score
    """
    best_grid = None
    best_score = float('-inf')

    for episode in range(episodes):
        grid = load_or_initialize_grid(csv_files, grid_rows, grid_cols, E_START_POSITION)  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV
        state = grid
        total_reward = 0
        reward = 0  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ reward ‡πÄ‡∏õ‡πá‡∏ô 0

        for _ in range(grid_rows * grid_cols):
            action = choose_action(grid)
        if action is None and _ > (grid_rows * grid_cols) // 2:
            break  # ‡∏´‡∏¢‡∏∏‡∏î‡∏ù‡∏∂‡∏Å‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á Grid

            r, c, char = action  # ‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà AI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏≤‡∏á
            grid[r][c] = char  # ‚úÖ ‡∏ß‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏ô Grid

            # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            if _ % 5 == 0:  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏∏‡∏Å ‡πÜ 5 ‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
                reward = calculate_reward_verbose(grid)
                print(f"üèÜ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {reward}")
                update_q_table(state, action, reward, grid)

            state = grid  # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á Grid

        reward = calculate_reward_verbose(grid)  # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        total_reward = reward

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Layout ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        if total_reward > best_score:
            best_score = total_reward
            best_grid = [row[:] for row in grid]

        # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏∏‡∏Å ‡πÜ 1000 Episodes
        if (episode + 1) % 1000 == 0:
            print(f"Episode {episode + 1}/{episodes}, Reward: {total_reward}")

    return best_grid, best_score

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Q-Table
save_q_table(q_table)

best_grid, best_score = train_ai(EPISODES, GRID_ROWS, GRID_COLS, csv_files)

print("\nüèÜ Best Layout Found:")
for row in best_grid:
    print(" | ".join(row))

print("üéØ AI Training Completed! Q-Table Saved.")
print(f"\n‚úÖ Best Score Achieved: {best_score}")

print(f"üèÜ Best Score: {best_score}")
print("üèÜ Best Grid Layout:")
for row in best_grid:
    print(" ".join(row))
