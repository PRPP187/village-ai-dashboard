import numpy as np
import random
import json
import os
import ast
import glob
import pandas as pd
from collections import deque
import time

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î Grid
GRID_ROWS = 3
GRID_COLS = 3
EPISODES = 100
ALPHA = 0.1  
GAMMA = 0.9  
SCORES = {'E': 10, 'G': 10, 'H': 15, 'R': 5, '0': 0}
Q_TABLE_FILE = "q_table.json"
E_START_POSITION = (2, 1)

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏à‡∏≤‡∏Å CSV ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
csv_folder = "data/maps/CSV/goodcsv"
csv_files = glob.glob(f"{csv_folder}/**/*.csv", recursive=True)

def count_r_clusters(grid):
    """ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á 'R' ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô """
    visited = set()
    clusters = 0

    def bfs(r, c):
        queue = deque([(r, c)])
        visited.add((r, c))
        while queue:
            x, y = queue.popleft()
            for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:  # 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
                nx, ny = x + dx, y + dy
                if 0 <= nx < GRID_ROWS and 0 <= ny < GRID_COLS and (nx, ny) not in visited and grid[nx][ny] == 'R':
                    visited.add((nx, ny))
                    queue.append((nx, ny))

    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'R' and (r, c) not in visited:
                clusters += 1
                bfs(r, c)
    
    return clusters

def calculate_reward_verbose(grid):
    total_reward = 0  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á E ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Grid
    e_row, e_col = None, None
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'E':
                e_row, e_col = r + 1, c + 1  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á (1-based index)
                break
        if e_row is not None:
            break  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ E ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

    # ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö E ‡πÉ‡∏ô Grid ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if e_row is None or e_col is None:
        print("‚ö†Ô∏è WARNING: ‡πÑ‡∏°‡πà‡∏û‡∏ö E ‡πÉ‡∏ô Grid! ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (1,1)")
        e_row, e_col = 1, 1

    # 1Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    base_score = sum(SCORES[grid[r][c]] for r in range(GRID_ROWS) for c in range(GRID_COLS) if grid[r][c] in SCORES)

    # 2Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
    bonus = 0  

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô "HHH" ‡πÅ‡∏•‡∏∞ "RRR" (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS - 2):
            if grid[r][c] == 'H' and grid[r][c+1] == 'H' and grid[r][c+2] == 'H':
                bonus += 20
            if grid[r][c] == 'R' and grid[r][c+1] == 'R' and grid[r][c+2] == 'R':
                bonus += 20

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô "H R H" ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
    for c in range(GRID_COLS):
        for r in range(GRID_ROWS - 2):
            if grid[r][c] == 'H' and grid[r+1][c] == 'R' and grid[r+2][c] == 'H':
                bonus += 20

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô HH ‡∏ö‡∏ô RR ‡πÅ‡∏•‡∏∞ RR ‡∏ö‡∏ô HH
    for r in range(GRID_ROWS - 1):
        for c in range(GRID_COLS - 1):
            if (grid[r][c] == 'H' and grid[r][c+1] == 'H' and grid[r+1][c] == 'R' and grid[r+1][c+1] == 'R'):
                bonus += 20
            if (grid[r][c] == 'R' and grid[r][c+1] == 'R' and grid[r+1][c] == 'H' and grid[r+1][c+1] == 'H'):
                bonus += 20

    # 3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ú‡∏¥‡∏î‡∏Å‡∏é (Penalty)
    penalty = 0

    # ‚ùå ‡πÄ‡∏ä‡πá‡∏Ñ H ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏¥‡∏î E (‡∏´‡∏±‡∏Å -50 ‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î E)
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'H':
                if (r > 0 and grid[r-1][c] == 'E') or (r < GRID_ROWS-1 and grid[r+1][c] == 'E') or \
                   (c > 0 and grid[r][c-1] == 'E') or (c < GRID_COLS-1 and grid[r][c+1] == 'E'):
                    penalty -= 50
    
    # ‚ùå ‡πÄ‡∏ä‡πá‡∏Ñ E ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R ‡πÄ‡∏•‡∏¢ = -100
    e_has_r_neighbor = False
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'E':
                if (r > 0 and grid[r-1][c] == 'R') or (r < GRID_ROWS-1 and grid[r+1][c] == 'R') or \
                   (c > 0 and grid[r][c-1] == 'R') or (c < GRID_COLS-1 and grid[r][c+1] == 'R'):
                    e_has_r_neighbor = True
    if not e_has_r_neighbor:
        penalty -= 100

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö H ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R (‡∏´‡∏±‡∏Å -100 ‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R)
    h_not_touching_r = 0  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô H ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'H':
                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ H ‡∏°‡∏µ R ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                has_r_neighbor = (
                    (r > 0 and grid[r-1][c] == 'R') or  # ‡∏ö‡∏ô
                    (r < GRID_ROWS-1 and grid[r+1][c] == 'R') or  # ‡∏•‡πà‡∏≤‡∏á
                    (c > 0 and grid[r][c-1] == 'R') or  # ‡∏ã‡πâ‡∏≤‡∏¢
                    (c < GRID_COLS-1 and grid[r][c+1] == 'R')  # ‡∏Ç‡∏ß‡∏≤
                )
                if not has_r_neighbor:  # ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ R ‡∏ï‡∏¥‡∏î‡πÄ‡∏•‡∏¢
                    h_not_touching_r += 1
                    penalty -= 100  # ‡∏´‡∏±‡∏Å -100 ‡∏ï‡πà‡∏≠ H ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏° `R` ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    r_clusters = count_r_clusters(grid)
    if r_clusters > 1:
        penalty -= 100 * (r_clusters - 1)  

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ö‡∏ô‡∏±‡∏™ G ‡πÅ‡∏•‡∏∞ R ‡∏ï‡∏¥‡∏î E
    additional_bonus = 0
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'G':
                if (r > 0 and grid[r-1][c] == 'E') or (r < GRID_ROWS-1 and grid[r+1][c] == 'E') or \
                (c > 0 and grid[r][c-1] == 'E') or (c < GRID_COLS-1 and grid[r][c+1] == 'E'):
                    additional_bonus += 10
            if grid[r][c] == 'R':
                if (r > 0 and grid[r-1][c] == 'E') or (r < GRID_ROWS-1 and grid[r+1][c] == 'E') or \
                (c > 0 and grid[r][c-1] == 'E') or (c < GRID_COLS-1 and grid[r][c+1] == 'E'):
                    additional_bonus += 5
              
    if all(cell != '0' for row in grid for cell in row):
        total_reward += 50  # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ñ‡πâ‡∏≤ Grid ‡πÄ‡∏ï‡πá‡∏°

    # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    final_score = base_score + bonus + penalty + additional_bonus

    return final_score

def load_or_initialize_grid(csv_folder, rows, cols, e_start_position):
    """
    ‡πÇ‡∏´‡∏•‡∏î Grid ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô, `E` ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Grid ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
    """
    print("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå CSV...")
    csv_files = glob.glob(f"{csv_folder}/**/*.csv", recursive=True)

    if not csv_files:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏•‡∏¢! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô...")
        return initialize_grid(rows, cols, e_start_position)

    best_grid = None
    best_score = float('-inf')

    for file in csv_files:
        df = pd.read_csv(file, header=None)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid
        if df.shape != (rows, cols):
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå {file} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ({df.shape})")
            continue  

        grid = df.astype(str).values.tolist()

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á `E` ‡πÉ‡∏ô Grid ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
        e_found = [(r, c) for r in range(len(grid)) for c in range(len(grid[0])) if grid[r][c] == 'E']

        # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö `E` ‡πÅ‡∏ï‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
        if not e_found or e_found[0] != (e_start_position[0] - 1, e_start_position[1] - 1):
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå {file} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á `E` ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ({e_found})")
            continue  

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á Grid ‡∏ô‡∏µ‡πâ
        score = calculate_reward_verbose(grid)

        print(f"‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå {file} | ‡∏Ç‡∏ô‡∏≤‡∏î: {df.shape} | ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á E: {e_found} | ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score}")

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Grid ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        if score > best_score:
            best_score = score
            best_grid = grid  

    if best_grid is not None:
        print(f"üèÜ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å CSV ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {best_score}")
        return best_grid
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Grid ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV -> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Grid ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á E ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô...")
    return initialize_grid(rows, cols, e_start_position)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
def initialize_grid(rows, cols, e_position=E_START_POSITION):
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á E ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (1-based index) """
    grid = [['0' for _ in range(cols)] for _ in range(rows)]  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏ß‡πà‡∏≤‡∏á

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å 1-based index ‡πÄ‡∏õ‡πá‡∏ô 0-based index
    r, c = e_position
    r, c = r - 1, c - 1  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö index ‡πÉ‡∏ô Python

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ E ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:
        grid[r][c] = 'E'  # ‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
    else:
        print("‚ö†Ô∏è E ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...")

        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏Ç‡∏≠‡∏á Grid ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏õ‡πä‡∏∞)
        candidate_positions = []
        if r < rows - 1:
            candidate_positions.append((rows - 1, c))  # ‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏¥‡∏°
        if c < cols - 1:
            candidate_positions.append((r, cols - 1))  # ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏¥‡∏°

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        if candidate_positions:
            r, c = random.choice(candidate_positions)
        
        grid[r][c] = 'E'

    return grid

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Grid ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏•‡∏≠‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô Episode
grid = load_or_initialize_grid(csv_folder, GRID_ROWS, GRID_COLS, E_START_POSITION)
print(f"‚úÖ ‡πÉ‡∏ä‡πâ Grid ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤: {len(grid)} rows x {max(len(row) for row in grid)} cols")

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
GRID_ROWS = len(grid)
GRID_COLS = max(len(row) for row in grid) if grid else 0
print(f"‚úÖ ‡∏Ç‡∏ô‡∏≤‡∏î Grid ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {GRID_ROWS} rows x {GRID_COLS} cols")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Action ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö
def choose_action(grid):
    if not grid or not isinstance(grid, list):  
        print("‚ö†Ô∏è ERROR: Grid ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Empty or Invalid Format)")
        return None

    rows = len(grid)
    cols = max(len(row) for row in grid)

    empty_cells = [(r, c) for r in range(rows) for c in range(cols) if grid[r][c] == '0']
    
    if not empty_cells:
        #print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£!")
        return None  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ

    r, c = random.choice(empty_cells)
    char = random.choice(['H', 'R', 'G'])
    return r, c, char

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Q-Table
def update_q_table(state, action, reward, next_state):
    state_str = json.dumps(state)
    action_str = str(tuple(action))
    next_state_str = json.dumps(next_state)

    if state_str not in q_table:
        q_table[state_str] = {}
    if action_str not in q_table[state_str]:
        q_table[state_str][action_str] = 0

    max_future_q = max(q_table.get(next_state_str, {}).values() or [0])
    q_table[state_str][action_str] = (1 - ALPHA) * q_table[state_str][action_str] + ALPHA * (reward + GAMMA * max_future_q)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Train AI
def train_ai(episodes, grid):
    """
    ‡∏ù‡∏∂‡∏Å AI ‡∏î‡πâ‡∏ß‡∏¢ Reinforcement Learning (Q-Learning)
    """
    best_grid = None
    best_score = float('-inf')

    for episode in range(episodes):
        state = [row[:] for row in grid]  # ‡πÉ‡∏ä‡πâ Grid ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å Episode
        total_reward = 0

        for _ in range(GRID_ROWS * GRID_COLS):
            action = choose_action(state)

            if action is None:
                if any('0' in row for row in state):  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ 0 ‡∏´‡πâ‡∏≤‡∏°‡∏´‡∏¢‡∏∏‡∏î
                    continue  
                else:
                    break  

            r, c, char = action  
            state[r][c] = char  

            reward = calculate_reward_verbose(state)
            update_q_table(state, action, reward, state)

        total_reward = calculate_reward_verbose(state)

        if total_reward > best_score:
            best_score = total_reward
            best_grid = [row[:] for row in state]

        if (episode + 1) % 10000 == 0:
            print(f"Episode {episode + 1}/{episodes}, Reward: {total_reward}")

    return best_grid, best_score

def measure_execution_time(function, *args, **kwargs):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô, ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ)
    """
    start_time = time.time()  # ‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    result = function(*args, **kwargs)  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    end_time = time.time()  # ‚è≥ ‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤

    elapsed_time = end_time - start_time  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    elapsed_minutes = elapsed_time / 60  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ

    print(f"\n‚è≥ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {elapsed_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ({elapsed_minutes:.2f} ‡∏ô‡∏≤‡∏ó‡∏µ)")
    
    return *result, elapsed_time  # ‚úÖ ‡πÉ‡∏ä‡πâ `*result` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å

# ‚úÖ ‡∏ù‡∏∂‡∏Å AI ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
q_table = {}

print(f"üìÇ CSV Files Found: {csv_files}")
print(f"üìÇ Searching CSV in: {csv_folder}")
print(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Action: {len(grid)} rows x {max(len(row) for row in grid)} cols")
print(f"‚úÖ ‡∏Ç‡∏ô‡∏≤‡∏î Grid ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤: {len(grid)} rows x {max(len(row) for row in grid)} cols")

best_grid, best_score, execution_time = measure_execution_time(train_ai, EPISODES, grid)

print("\nüèÜ Best Layout Found:")
for row in best_grid:
    print(" ".join(row))
print(f"\n‚úÖ Best Score Achieved: {best_score}")
