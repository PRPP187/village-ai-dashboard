import numpy as np
import random
import json
import os
import ast
import glob
import pandas as pd
from collections import deque
import time
import threading
import shutil
from filelock import FileLock
import requests


# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î Grid
GRID_ROWS = 5
GRID_COLS = 5
EPISODES = 10000
ALPHA = 0.1  
GAMMA = 0.9  
SCORES = {'E': 10, 'G': 10, 'H': 15, 'R': 5, '0': 0}
E_START_POSITION = (4, 4)

Q_TABLE_FILE = "q_table.json"
LOCK_FILE = Q_TABLE_FILE + ".lock"

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏à‡∏≤‡∏Å CSV ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
csv_folder = "data/maps/CSV/goodcsv"
csv_files = glob.glob(f"{csv_folder}/**/*.csv", recursive=True)

# ‚úÖ ‡πÉ‡∏ä‡πâ Lock ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
save_lock = threading.Lock()

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

def count_r_clusters(grid):
    """ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á 'R' ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô """
    visited = set()
    clusters = 0

    def bfs(r, c):
        queue = deque([(r, c)])
        visited.add((r, c))
        while queue:
            x, y = queue.popleft()
            for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:  # 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
                nx, ny = x + dx, y + dy
                if 0 <= nx < GRID_ROWS and 0 <= ny < GRID_COLS and (nx, ny) not in visited and grid[nx][ny] == 'R':
                    visited.add((nx, ny))
                    queue.append((nx, ny))

    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'R' and (r, c) not in visited:
                clusters += 1
                bfs(r, c)
    
    return clusters

def calculate_reward_verbose(grid):
    total_reward = 0  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á E ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Grid
    e_row, e_col = None, None
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'E':
                e_row, e_col = r + 1, c + 1  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á (1-based index)
                break
        if e_row is not None:
            break  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ E ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

    # ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö E ‡πÉ‡∏ô Grid ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if e_row is None or e_col is None:
        print("‚ö†Ô∏è WARNING: ‡πÑ‡∏°‡πà‡∏û‡∏ö E ‡πÉ‡∏ô Grid! ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (1,1)")
        e_row, e_col = 1, 1

    base_score = sum(SCORES[grid[r][c]] for r in range(GRID_ROWS) for c in range(GRID_COLS) if grid[r][c] in SCORES)

    bonus = 0  

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô "HHH" ‡πÅ‡∏•‡∏∞ "RRR" (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS - 2):
            if grid[r][c] == 'H' and grid[r][c+1] == 'H' and grid[r][c+2] == 'H':
                bonus += 20
            if grid[r][c] == 'R' and grid[r][c+1] == 'R' and grid[r][c+2] == 'R':
                bonus += 20

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô "H R H" ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
    for c in range(GRID_COLS):
        for r in range(GRID_ROWS - 2):
            if grid[r][c] == 'H' and grid[r+1][c] == 'R' and grid[r+2][c] == 'H':
                bonus += 20

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô HH ‡∏ö‡∏ô RR ‡πÅ‡∏•‡∏∞ RR ‡∏ö‡∏ô HH
    for r in range(GRID_ROWS - 1):
        for c in range(GRID_COLS - 1):
            if (grid[r][c] == 'H' and grid[r][c+1] == 'H' and grid[r+1][c] == 'R' and grid[r+1][c+1] == 'R'):
                bonus += 20
            if (grid[r][c] == 'R' and grid[r][c+1] == 'R' and grid[r+1][c] == 'H' and grid[r+1][c+1] == 'H'):
                bonus += 20

    penalty = 0

    # ‚ùå ‡πÄ‡∏ä‡πá‡∏Ñ H ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏¥‡∏î E (‡∏´‡∏±‡∏Å -50 ‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î E)
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'H':
                if (r > 0 and grid[r-1][c] == 'E') or (r < GRID_ROWS-1 and grid[r+1][c] == 'E') or \
                   (c > 0 and grid[r][c-1] == 'E') or (c < GRID_COLS-1 and grid[r][c+1] == 'E'):
                    penalty -= 50
    
    # ‚ùå ‡πÄ‡∏ä‡πá‡∏Ñ E ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R ‡πÄ‡∏•‡∏¢ = -100
    e_has_r_neighbor = False
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'E':
                if (r > 0 and grid[r-1][c] == 'R') or (r < GRID_ROWS-1 and grid[r+1][c] == 'R') or \
                   (c > 0 and grid[r][c-1] == 'R') or (c < GRID_COLS-1 and grid[r][c+1] == 'R'):
                    e_has_r_neighbor = True
    if not e_has_r_neighbor:
        penalty -= 100

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö H ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R (‡∏´‡∏±‡∏Å -100 ‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R)
    h_not_touching_r = 0  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô H ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'H':
                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ H ‡∏°‡∏µ R ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                has_r_neighbor = (
                    (r > 0 and grid[r-1][c] == 'R') or  # ‡∏ö‡∏ô
                    (r < GRID_ROWS-1 and grid[r+1][c] == 'R') or  # ‡∏•‡πà‡∏≤‡∏á
                    (c > 0 and grid[r][c-1] == 'R') or  # ‡∏ã‡πâ‡∏≤‡∏¢
                    (c < GRID_COLS-1 and grid[r][c+1] == 'R')  # ‡∏Ç‡∏ß‡∏≤
                )
                if not has_r_neighbor:  # ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ R ‡∏ï‡∏¥‡∏î‡πÄ‡∏•‡∏¢
                    h_not_touching_r += 1
                    penalty -= 100  # ‡∏´‡∏±‡∏Å -100 ‡∏ï‡πà‡∏≠ H ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏° `R` ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    r_clusters = count_r_clusters(grid)
    if r_clusters > 1:
        penalty -= 100 * (r_clusters - 1)  

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏ñ‡πâ‡∏≤ G ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    g_count = sum(row.count('G') for row in grid)
    if g_count > (GRID_ROWS * GRID_COLS) * 0.3:  # ‡∏ñ‡πâ‡∏≤ G ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 30% ‡∏Ç‡∏≠‡∏á Grid
        penalty -= 100  # ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

    additional_bonus = 0

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ö‡∏ô‡∏±‡∏™ G ‡πÅ‡∏•‡∏∞ R ‡∏ï‡∏¥‡∏î E
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'G':
                if (r > 0 and grid[r-1][c] == 'E') or (r < GRID_ROWS-1 and grid[r+1][c] == 'E') or \
                (c > 0 and grid[r][c-1] == 'E') or (c < GRID_COLS-1 and grid[r][c+1] == 'E'):
                    additional_bonus += 10
            if grid[r][c] == 'R':
                if (r > 0 and grid[r-1][c] == 'E') or (r < GRID_ROWS-1 and grid[r+1][c] == 'E') or \
                (c > 0 and grid[r][c-1] == 'E') or (c < GRID_COLS-1 and grid[r][c+1] == 'E'):
                    additional_bonus += 5
              
    if all(cell != '0' for row in grid for cell in row):
        additional_bonus += 50  # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ñ‡πâ‡∏≤ Grid ‡πÄ‡∏ï‡πá‡∏°

    # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    total_reward = base_score + bonus + penalty + additional_bonus

    return total_reward

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡∏≤‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á E ‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å

def initialize_grid(rows, cols, e_position):
    """ ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô `E` ‡πÑ‡∏õ‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ 1-based index ‡∏ï‡∏•‡∏≠‡∏î) """
    print(f"üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏Ç‡∏ô‡∏≤‡∏î {rows}x{cols} ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á E ‡∏ó‡∏µ‡πà {e_position} (1-based index)")

    grid = [['0' for _ in range(cols)] for _ in range(rows)]  # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏ß‡πà‡∏≤‡∏á
    r, c = e_position  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1-based index ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `E` ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if r == 1 or r == rows or c == 1 or c == cols:
        grid[r-1][c-1] = 'E'  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
    else:
        print(f"‚ö†Ô∏è E ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ({e_position}) ...")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏≠‡∏ö (Top, Bottom, Left, Right)
        distances = {
            "top": r - 1,
            "bottom": rows - r,
            "left": c - 1,
            "right": cols - c
        }

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
        sorted_edges = sorted(distances.items(), key=lambda x: x[1])

        # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        for edge, _ in sorted_edges:
            if edge == "top":
                r = 1
                break
            elif edge == "bottom":
                r = rows
                break
            elif edge == "left":
                c = 1
                break
            elif edge == "right":
                c = cols
                break

        grid[r-1][c-1] = 'E'  # ‚úÖ ‡∏ß‡∏≤‡∏á `E` ‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

    print(f"‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á E: {r}, {c} (1-based index)")
    return grid, (r, c)  # ‚úÖ ‡∏Ñ‡∏∑‡∏ô Grid ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á E (1-based)

def load_or_initialize_grid(csv_folder, rows, cols, e_position):
    """
    ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Grid ‡∏à‡∏≤‡∏Å CSV ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á E ‡πÉ‡∏´‡∏°‡πà
    ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÉ‡∏´‡∏°‡πà
    """
    print(f"üìå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå CSV {rows}x{cols} ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á E: {e_position} (1-based index)")

    csv_files = glob.glob(f"{csv_folder}/**/*.csv", recursive=True)

    if not csv_files:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV! ‡πÉ‡∏ä‡πâ Grid ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ó‡∏ô...")
        return initialize_grid(rows, cols, e_position)  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà

    best_grid = None
    best_score = float('-inf')

    for file in csv_files:
        df = pd.read_csv(file, header=None)

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î Grid
        if df.shape != (rows, cols):
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå {file} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á {df.shape}")
            continue  

        grid_from_csv = df.astype(str).values.tolist()
        e_found = [(r+1, c+1) for r in range(len(grid_from_csv)) for c in range(len(grid_from_csv[0])) if grid_from_csv[r][c] == 'E']

        if not e_found or e_found[0] != e_position:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå {file} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á `E` ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á {e_found} (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {e_position})")
            continue  

        score = calculate_reward_verbose(grid_from_csv)  # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

        if score > best_score:
            best_score = score
            best_grid = grid_from_csv  

    if best_grid is not None:
        print(f"üèÜ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {best_score}")
        return best_grid, e_position  # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1-based index

    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°! ‡πÉ‡∏ä‡πâ Grid ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ó‡∏ô...")
    return initialize_grid(rows, cols, e_position)  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Q-Table

def load_q_table():
    """ ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Q-Table ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ """
    try:
        with open(Q_TABLE_FILE, "r") as f:
            data = json.load(f)

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        q_table = {}
        for k, v in data.items():
            try:
                key = ast.literal_eval(k)  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á key ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô tuple
                q_table[key] = v
            except (SyntaxError, ValueError):
                print(f"‚ö†Ô∏è Warning: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á Key {k} ‡πÑ‡∏î‡πâ ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")

        print(f"‚úÖ Q-Table Loaded: {len(q_table)} states")  # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô states ‡πÉ‡∏ô Q-Table
        return q_table

    except (FileNotFoundError, json.JSONDecodeError):
        print("‚ö†Ô∏è Warning: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Q-Table ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")
        return {}  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Q-Table ‡∏ß‡πà‡∏≤‡∏á

def send_q_table_to_server():
    url = "http://127.0.0.1:5000/update_q_table"

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Q-Table ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    if not q_table:
        print("‚ö†Ô∏è Warning: Q-Table ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        return

    try:
        response = requests.post(url, json=q_table)
        response.raise_for_status()
        print(f"‚úÖ Q-Table Sent: {len(q_table)} states | Server Response: {response.json()}")  # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô states ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ

        time.sleep(0.1)  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ñ‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Q-Table ‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {e}")

def update_q_table(state, action, reward, next_state):
    """
    ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ Q-Table ‡∏ï‡∏≤‡∏° Q-Learning Algorithm
    ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Q-Table ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    """
    state_key = str(tuple(tuple(row) for row in state))
    next_state_key = str(tuple(tuple(row) for row in next_state))
    action_key = str(tuple(action))

    if state_key not in q_table:
        q_table[state_key] = {}
    if action_key not in q_table[state_key]:
        q_table[state_key][action_key] = 0  

    max_future_q = max(q_table.get(next_state_key, {}).values(), default=0)
    q_table[state_key][action_key] = (1 - ALPHA) * q_table[state_key][action_key] + ALPHA * (reward + GAMMA * max_future_q)

    send_q_table_to_server()  # ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Action ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô)

def choose_action(grid, step):
    rows = len(grid)
    cols = len(grid[0])

    e_position = [(r, c) for r in range(rows) for c in range(cols) if grid[r][c] == 'E'][0]
    e_row, e_col = e_position

    empty_cells = [(r, c) for r in range(rows) for c in range(cols) if grid[r][c] == '0']
    empty_cells.sort(key=lambda pos: abs(pos[0] - e_row) + abs(pos[1] - e_col))

    best_options = []

    for r, c in empty_cells:
        for char in ['H', 'R', 'G']:
            grid[r][c] = char
            score = calculate_reward_verbose(grid)
            grid[r][c] = '0'

            best_options.append((score, (r, c), char))

    best_options.sort(reverse=True, key=lambda x: x[0])  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
    top_choices = best_options[:3]  # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Top 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

    if top_choices:
        chosen = random.choice(top_choices)  # ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        r, c = chosen[1]
        char = chosen[2]
        grid[r][c] = char
        #print(f"Step {step}: ‡∏ß‡∏≤‡∏á '{char}' ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ({r+1}, {c+1}), ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {chosen[0]}")

        #for row in grid:
            #print(" ".join(row))
        #print("\n" + "="*20 + "\n")

        return r, c, char
    else:
        #print(f"Step {step}: ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ")
        return None

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Train AI

def train_ai(episodes, grid):
    best_grid = None
    best_score = float('-inf')

    for episode in range(episodes):
        state = [row[:] for row in grid]
        total_reward = 0
        step = 0  # ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô step ‡∏ó‡∏µ‡πà 0

        for _ in range(GRID_ROWS * GRID_COLS):
            step += 1  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° step ‡∏ó‡∏µ‡∏•‡∏∞ 1
            action = choose_action(state, step)

            if action is None:
                if any('0' in row for row in state):  
                    continue  
                else:
                    break  

            r, c, char = action  
            state[r][c] = char  

            reward = calculate_reward_verbose(state)
            update_q_table(state, action, reward, state)

        total_reward = calculate_reward_verbose(state)

        if total_reward > best_score:
            best_score = total_reward
            best_grid = [row[:] for row in state]

        if (episode + 1) % 1 == 0:
            print(f"Episode {episode + 1}/{episodes}, Reward: {total_reward}")

    send_q_table_to_server()

    return best_grid, best_score

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô

def measure_execution_time(function, *args, **kwargs):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô, ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ)
    """
    start_time = time.time()  # ‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    result = function(*args, **kwargs)  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    end_time = time.time()  # ‚è≥ ‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤

    elapsed_time = end_time - start_time  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    elapsed_minutes = elapsed_time / 60  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ

    print(f"\n‚è≥ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {elapsed_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ({elapsed_minutes:.2f} ‡∏ô‡∏≤‡∏ó‡∏µ)")
    
    return *result, elapsed_time  # ‚úÖ ‡πÉ‡∏ä‡πâ `*result` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å

# ‚úÖ ‡πÉ‡∏ä‡πâ Lock ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
save_lock = threading.Lock()

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Q-Table (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô load_q_table)
q_table = {}  # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Q-Table ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà)
load_q_table()

# ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô `E` ‡∏Å‡πà‡∏≠‡∏ô
grid, new_e_position = initialize_grid(GRID_ROWS, GRID_COLS, E_START_POSITION)

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Grid ‡∏à‡∏≤‡∏Å CSV ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á `E` ‡πÉ‡∏´‡∏°‡πà
grid, _ = load_or_initialize_grid(csv_folder, GRID_ROWS, GRID_COLS, new_e_position)

print(f"‚úÖ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î: {len(grid)} rows x {len(grid[0]) if grid else 0} cols | ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á E: {new_e_position}")

best_grid, best_score, execution_time = measure_execution_time(train_ai, EPISODES, grid)

#print(f"üìÇ CSV Files Found: {csv_files}")
#print(f"üìÇ Searching CSV in: {csv_folder}")

print("\nüèÜ Best Layout Found:")
for row in best_grid:
    print(" ".join(row))
print(f"\n‚úÖ Best Score Achieved: {best_score}")
