import json
import os
import csv
import cv2
import random
import numpy as np

# ‚úÖ CONFIGURABLE SETTINGS
GRID_ROWS = 3  # üü¢ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î Grid ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
GRID_COLS = 3  # üü¢ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î Grid ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
EPISODES = 10000  # üü¢ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô AI ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
RUNS = 1000  # üü¢ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Layout ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

# ‚úÖ FILE PATHS (‡πÅ‡∏¢‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå)
DATA_PATH = "data/"
Q_TABLE_FILE = os.path.join(DATA_PATH, "q_table.json")
BEST_LAYOUT_FILE = os.path.join(DATA_PATH, "best_layouts.json")
CSV_PATH = os.path.join(DATA_PATH, "maps/csv/")
JSON_PATH = os.path.join(DATA_PATH, "maps/json/")
IMAGE_PATH = os.path.join(DATA_PATH, "maps/images/")

# ‚úÖ Helper Functions
def neighbors(r, c, rows, cols):
    """ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏≠‡∏ö‡πÜ (‡∏ö‡∏ô, ‡∏•‡πà‡∏≤‡∏á, ‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡∏ß‡∏≤) """
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    return [(r+dr, c+dc) for dr, dc in directions if 0 <= r+dr < rows and 0 <= c+dc < cols]

# ‚úÖ Decision Making for AI Exploration
def should_explore(epsilon=0.2):
    """ 20% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ AI ‡∏ó‡∏î‡∏•‡∏≠‡∏á Layout ‡πÉ‡∏´‡∏°‡πà """
    return random.uniform(0, 1) < epsilon

# ‚úÖ FUNCTION TO LOAD MAP FILES
def load_map_from_csv(filename):
    """ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV """
    filepath = os.path.join(CSV_PATH, filename)
    with open(filepath, newline='') as csvfile:
        return [row for row in csv.reader(csvfile)]

def load_map_from_json(filename):
    """ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON """
    filepath = os.path.join(JSON_PATH, filename)
    with open(filepath, "r") as f:
        return json.load(f)["map"]

def load_map_from_image(filename):
    """ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û """
    filepath = os.path.join(IMAGE_PATH, filename)
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
    _, binary = cv2.threshold(image, 128, 255, cv2.THRESH_BINARY)
    rows, cols = binary.shape
    return [['R' if binary[r, c] == 0 else 'H' for c in range(cols)] for r in range(rows)]

# ‚úÖ FUNCTION TO LOAD ALL MAP FILES
def load_all_maps():
    """ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå CSV, JSON, ‡πÅ‡∏•‡∏∞ Images """
    all_maps = []
    
    # üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å CSV
    for filename in os.listdir(CSV_PATH):
        if filename.endswith(".csv"):
            all_maps.append(load_map_from_csv(filename))
    
    # üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å JSON
    for filename in os.listdir(JSON_PATH):
        if filename.endswith(".json"):
            all_maps.append(load_map_from_json(filename))
    
    # üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Images
    for filename in os.listdir(IMAGE_PATH):
        if filename.endswith((".png", ".jpg", ".jpeg")):
            all_maps.append(load_map_from_image(filename))
    
    return all_maps

# ‚úÖ Validation & Calculation Functions
def calculate_land_ratios(grid):
    """ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà """
    total = sum(len(row) for row in grid)
    counts = {t: sum(row.count(t) for row in grid) for t in ['H', 'R', 'G', 'C', 'U']}
    return {t: (counts[t] / total) * 100 for t in counts}

def is_valid(grid, r, c, char):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á `(r, c)` ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ `char` ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà """
    
    # ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏ß‡∏≤‡∏á‡∏ó‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    if grid[r][c] != '0':
        return False

    rows, cols = len(grid), len(grid[0])
    
    if char == 'E':
        if r != 0 and r != rows - 1 and c != 0 and c != cols - 1:
            return False  # ‚ùå E ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if sum(grid[nr][nc] == 'E' for nr, nc in neighbors(r, c, rows, cols)) == 0:
            return False  # ‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ E ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
        return True

    if char == 'R':
        if not is_road_connected(grid, r, c):
            return False  # ‚ùå ‡∏ñ‡∏ô‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        return True

    # ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö G (Green Space)
    if char == 'G':
        adjacent_G = sum(grid[nr][nc] == 'G' for nr, nc in neighbors(r, c, rows, cols))
        if adjacent_G == 0:
            return False  # ‚ùå G ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ G ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        return True

    if char == 'H':
        adjacent_R = sum(grid[nr][nc] == 'R' for nr, nc in neighbors(r, c, rows, cols))
        adjacent_G = sum(grid[nr][nc] == 'G' for nr, nc in neighbors(r, c, rows, cols))
        if adjacent_R == 0:
            return False  # ‚ùå ‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        if adjacent_G == 0:
            return False  # ‚ùå ‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏™‡∏ß‡∏ô‡∏î‡πâ‡∏ß‡∏¢
        return True

    # ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö C (Community Area)
    if char == 'C':
        if sum(grid[nr][nc] == 'R' for nr, nc in neighbors(r, c, rows, cols)) == 0:
            return False  # ‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô
        if sum(grid[nr][nc] == 'C' for nr, nc in neighbors(r, c, rows, cols)) == 0:
            return False  # ‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ C ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
        return True

    # ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö P (Parking)
    if char == 'P':
        if sum(grid[nr][nc] == 'C' for nr, nc in neighbors(r, c, rows, cols)) == 0:
            return False  # ‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        if sum(grid[nr][nc] == 'R' for nr, nc in neighbors(r, c, rows, cols)) == 0:
            return False  # ‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô
        return True

    # ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö W (Water)
    if char == 'W':
        if sum(grid[nr][nc] == 'G' for nr, nc in neighbors(r, c, rows, cols)) == 0:
            return False  # ‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏™‡∏ß‡∏ô
        if any(grid[nr][nc] in ['H', 'R'] for nr, nc in neighbors(r, c, rows, cols)):
            return False  # ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏ô‡∏ô
        return True

    return True  # ‚úÖ ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ

def get_reward(grid):
    """ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á Layout """
    score_map = {
        'E': 5, 'R': -5, 'G': 15, 'H': 20, 'C': 10, 'U': 10, 'W': 5, 'P': 10, 'D': 10
    }
    score = 0
    first_char = None  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£

    total_cells = len(grid) * len(grid[0])  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    count_E = sum(row.count('E') for row in grid)  # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô E

    # üü¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° E ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
    visited = set()
    e_clusters = 0

    def dfs(r, c):
        """ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á 'E' """
        stack = [(r, c)]
        while stack:
            cr, cc = stack.pop()
            if (cr, cc) in visited:
                continue
            visited.add((cr, cc))
            for nr, nc in neighbors(cr, cc, len(grid), len(grid[0])):
                if grid[nr][nc] == 'E' and (nr, nc) not in visited:
                    stack.append((nr, nc))

    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á E
    for r in range(len(grid)):
        for c in range(len(grid[0])):
            if grid[r][c] == 'E' and (r, c) not in visited:
                e_clusters += 1
                dfs(r, c)

    for r in range(len(grid)):
        for c in range(len(grid[0])):
            cell = grid[r][c]

            if cell != '0' and first_char is None:
                first_char = cell  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏á
                if first_char == 'E':
                    score += 50  # ‚úÖ ‡∏ñ‡πâ‡∏≤ E ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å ‚Üí ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞
                else:
                    score -= 30  # ‚ùå ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô ‚Üí ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

            score += score_map.get(cell, 0)  # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£

            # ‚úÖ ‡∏Å‡∏é‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            if cell == 'E':
                if r == 0 or r == len(grid) - 1 or c == 0 or c == len(grid[0]) - 1:
                    score += 10  # ‚úÖ E ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏ö ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                else:
                    score -= 20  # ‚ùå E ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏ö ‚Üí ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

            if cell == 'R':
                if not is_road_connected(grid):
                    score -= 20  # ‚ùå ‡∏ñ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‚Üí ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

            if cell == 'G':
                neighbors_G = sum(grid[nr][nc] == 'G' for nr, nc in neighbors(r, c, len(grid), len(grid[0])))
                if neighbors_G > 0:
                    score += 10  # ‚úÖ G ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                else:
                    score -= 10  # ‚ùå G ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ‚Üí ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

    # ‚úÖ **‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô `E`**
    E_ratio = count_E / total_cells  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á E ‡πÉ‡∏ô Grid
    if E_ratio < 0.075:  # ‚úÖ **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 10% ‚Üí 7.5%**
        score += 30  # ‚úÖ ‡∏ñ‡πâ‡∏≤ E ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 7.5% ‚Üí **‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°**
    else:
        score -= 20  # ‚ùå ‡∏ñ‡πâ‡∏≤ E ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 7.5% ‚Üí **‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô**

    # ‚úÖ **‡∏ñ‡πâ‡∏≤ `E` ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Üí ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô**
    if e_clusters > 1:
        score -= 60 * (e_clusters - 1)  # ‚ùå ‡∏´‡∏±‡∏Å 50 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô

    return score


def is_road_connected(grid, r=None, c=None):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ (r, c) ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î‡∏ô‡∏±‡πâ‡∏ô
    """
    rows, cols = len(grid), len(grid[0])
    visited = set()
    
    # ‡∏´‡∏≤ R ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    road_start = None
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == 'R':
                road_start = (i, j)
                break
        if road_start:
            break
    
    if not road_start:
        return False  # ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ñ‡∏ô‡∏ô‡πÄ‡∏•‡∏¢

    # BFS ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏ô‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°
    queue = [road_start]
    while queue:
        x, y = queue.pop(0)
        if (x, y) in visited:
            continue
        visited.add((x, y))
        for nx, ny in neighbors(x, y, rows, cols):
            if grid[nx][ny] == 'R' and (nx, ny) not in visited:
                queue.append((nx, ny))

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
    all_roads = {(i, j) for i in range(rows) for j in range(cols) if grid[i][j] == 'R'}
    if visited != all_roads:
        return False  # ‚ùå ‡∏°‡∏µ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏Å‡∏±‡∏ô
    
    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (r, c) ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏Ñ‡πà‡∏à‡∏∏‡∏î‡∏ô‡∏±‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÑ‡∏´‡∏°
    if r is not None and c is not None:
        return (r, c) in visited

    return True  # ‚úÖ ‡∏ñ‡∏ô‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

# ‚úÖ Reinforcement Learning (Q-Table)
def load_q_table(filepath=Q_TABLE_FILE):
    """ ‡πÇ‡∏´‡∏•‡∏î Q-Table ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ """
    if not os.path.exists(filepath):
        print("‚ö†Ô∏è Q-Table file not found. Creating a new Q-Table...")
        return {}  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Q-Table ‡∏ß‡πà‡∏≤‡∏á ‡πÜ
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è JSON Decode Error: The file may be corrupted. Resetting Q-Table...")
        return {}
    except Exception as e:
        print(f"‚ö†Ô∏è Unexpected Error while loading JSON: {e}")
        return {}

def save_q_table(q_table, filepath=Q_TABLE_FILE):
    """ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Q-Table ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON """
    try:
        with open(filepath, "w", encoding="utf-8") as f:
            json.dump(q_table, f, indent=4)
    except Exception as e:
        print(f"‚ö†Ô∏è Error while saving Q-Table: {e}")

def update_q_table(q_table, state, action, reward, next_state):
    """ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ Q-Table """
    q_table[str(state)] = q_table.get(str(state), {})
    q_table[str(state)][str(action)] = reward
    return q_table

def choose_next_move(grid):
    """ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà AI ‡∏à‡∏∞‡∏ß‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ """
    empty_cells = [(r, c) for r in range(len(grid)) for c in range(len(grid[0])) if grid[r][c] == '0']
    
    if not empty_cells:
        return None  # ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    
    r, c = random.choice(empty_cells)  # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏°‡∏≠
    char = random.choice(['H', 'R', 'G', 'C', 'U'])  # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Å‡∏é)
    
    return r, c, char  # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

# ‚úÖ Database of Best Layouts
def load_best_layout(filepath="best_layouts.json"):
    try:
        with open(filepath, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return None, float('-inf')
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON from {filepath}: {e}")
        return None, float('-inf')

def save_best_layout(layout, score, filepath="best_layouts.json"):
    with open(filepath, "w") as f:
        json.dump({"layout": layout, "score": score}, f, indent=4)

# ‚úÖ AI TRAINING & GENERATION
def train_ai():
    """ ‡πÄ‡∏ó‡∏£‡∏ô AI ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Q-Table ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà """
    q_table = load_q_table()
    all_maps = load_all_maps()
    
    for episode in range(EPISODES):
        print(f"üß† Training AI: Episode {episode+1}/{EPISODES}")  # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á Progress ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Train AI
        
        for grid in all_maps:  # üîπ ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å AI
            for step in range(GRID_ROWS * GRID_COLS):
                move = choose_next_move(grid)
                if move is None:
                    break
                r, c, char = move
                prev_state = tuple(map(tuple, grid))
                grid[r][c] = char
                reward = get_reward(grid)
                q_table = update_q_table(q_table, prev_state, (r, c, char), reward, grid)

    save_q_table(q_table)


def generate_best_layout(rows=GRID_ROWS, cols=GRID_COLS, runs=RUNS, map_file=None):
    best_layout, best_score = load_best_layout()
    
    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á grid ‡πÄ‡∏õ‡∏•‡πà‡∏≤
    grid = [['0' for _ in range(cols)] for _ in range(rows)]  

    # ‚úÖ ‡∏ß‡∏≤‡∏á E ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Layout
    edge_positions = [(0, c) for c in range(cols)] + [(r, 0) for r in range(rows)] + \
                     [(rows - 1, c) for c in range(cols)] + [(r, cols - 1) for r in range(rows)]
    random.shuffle(edge_positions)

    e_placed = 0
    for r, c in edge_positions:
        if e_placed < 3 and grid[r][c] == '0':  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
            grid[r][c] = 'E'
            e_placed += 1
        if e_placed >= 3:
            break

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ E ‡∏ß‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á E:")
    for row in grid:
        print(" ".join(row))

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `best_score` ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string
    if isinstance(best_score, str):
        try:
            best_score = float(best_score)
        except ValueError:
            best_score = float('-inf')

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Layout ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ AI
    for _ in range(runs):
        temp_grid = [row[:] for row in grid]  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á grid ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô
        for _ in range(rows * cols):
            move = choose_next_move(temp_grid)  # ‚úÖ ‡πÉ‡∏´‡πâ AI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            if move is None:
                break  # ‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
            r, c, char = move
            if temp_grid[r][c] == '0':  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏á
                temp_grid[r][c] = char

        score = get_reward(temp_grid)  # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Layout
        if score > best_score:  # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Layout ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_score = score
            best_layout = [row[:] for row in temp_grid]
            save_best_layout(best_layout, best_score)

    return best_layout, best_score

# ‚úÖ MAIN EXECUTION
if __name__ == "__main__":
    train_ai()
    best_layout, best_score = generate_best_layout()
    print(f"\nüèÜ Layout ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {best_score}")
    for row in best_layout:
        print(" ".join(row))
