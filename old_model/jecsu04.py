import numpy as np
import random
import json
import os
import ast  # ‚úÖ ‡πÉ‡∏ä‡πâ ast.literal_eval ‡πÅ‡∏ó‡∏ô eval ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î Grid (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
GRID_ROWS = 3
GRID_COLS = 3
EPISODES = 10000  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
ALPHA = 0.1  # Learning Rate
GAMMA = 0.9  # Discount Factor

# ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
SCORES = {'E': 10, 'G': 10, 'H': 15, 'R': 5, '0': 0}  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô '?' ‡πÄ‡∏õ‡πá‡∏ô '0'

Q_TABLE_FILE = "q_table.json"

# ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á E (1-based index)
E_START_POSITION = (2, 2)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î Q-Table ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
def load_q_table(filepath=Q_TABLE_FILE):
    """ ‡πÇ‡∏´‡∏•‡∏î Q-Table ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Key Format """
    if not os.path.exists(filepath):
        print("‚ö†Ô∏è Q-Table file not found. Creating a new Q-Table...")
        return {}  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Q-Table ‡∏ß‡πà‡∏≤‡∏á ‡πÜ
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è JSON Decode Error: The file may be corrupted. Resetting Q-Table...")
        return {}
    except Exception as e:
        print(f"‚ö†Ô∏è Unexpected Error while loading JSON: {e}")
        return {}

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Q-Table
def save_q_table(q_table, filepath=Q_TABLE_FILE):
    """ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Q-Table ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON """
    try:
        with open(filepath, "w", encoding="utf-8") as f:
            json.dump(q_table, f, indent=4)
    except Exception as e:
        print(f"‚ö†Ô∏è Error while saving Q-Table: {e}")

# ‡πÇ‡∏´‡∏•‡∏î Q-Table
q_table = load_q_table()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á)
def initialize_grid(rows, cols, e_position=E_START_POSITION):
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á E ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (1-based index) """
    grid = [['0' for _ in range(cols)] for _ in range(rows)]  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏ß‡πà‡∏≤‡∏á

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å 1-based index ‡πÄ‡∏õ‡πá‡∏ô 0-based index
    r, c = e_position
    r, c = r - 1, c - 1  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö index ‡πÉ‡∏ô Python
    if 0 <= r < rows and 0 <= c < cols:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á Grid
        grid[r][c] = 'E'  # ‡∏ß‡∏≤‡∏á E ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    else:
        print("‚ö†Ô∏è ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á E ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á Grid!")

    return grid

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á Grid
def calculate_reward(grid):
    score = sum(SCORES[grid[r][c]] for r in range(GRID_ROWS) for c in range(GRID_COLS) if grid[r][c] in SCORES)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
    bonus = 0  
    if all(grid[0][c] == 'H' for c in range(GRID_COLS)):
        bonus += 20  # ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô HHH
    if all(grid[1][c] == 'R' for c in range(GRID_COLS)):
        bonus += 20  # ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô RRR
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô H R H ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    for c in range(GRID_COLS):
        if grid[0][c] == 'H' and grid[1][c] == 'R' and grid[2][c] == 'H':
            bonus += 20  # ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô H R H

    score += bonus  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ú‡∏¥‡∏î‡∏Å‡∏é
    penalty = 0  
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'H':
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ H ‡∏ï‡∏¥‡∏î R ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if not ((r > 0 and grid[r-1][c] == 'R') or (r < GRID_ROWS-1 and grid[r+1][c] == 'R') or
                        (c > 0 and grid[r][c-1] == 'R') or (c < GRID_COLS-1 and grid[r][c+1] == 'R')):
                    penalty -= 20  # ‚ùå ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πâ‡∏≤ H ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î R

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ H ‡∏ï‡∏¥‡∏î E ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏´‡∏±‡∏Å -30 ‡∏ï‡πà‡∏≠‡∏Ñ‡∏π‡πà)
                h_e_penalty = 0  
                if (r > 0 and grid[r-1][c] == 'E'):
                    h_e_penalty -= 30
                if (r < GRID_ROWS-1 and grid[r+1][c] == 'E'):
                    h_e_penalty -= 30
                if (c > 0 and grid[r][c-1] == 'E'):
                    h_e_penalty -= 30
                if (c < GRID_COLS-1 and grid[r][c+1] == 'E'):
                    h_e_penalty -= 30

                penalty += h_e_penalty  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏´‡∏±‡∏Å‡∏à‡∏≤‡∏Å H ‡∏ï‡∏¥‡∏î E
                if h_e_penalty < 0:
                    print(f"‚ùå H ‡∏ï‡∏¥‡∏î E ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ({r}, {c}), ‡∏´‡∏±‡∏Å {h_e_penalty} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")

    score += penalty  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

    print(f"üèÜ Base Score: {score}, Bonus: {bonus}, Penalty: {penalty}, Final Score: {score}")
    return score

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (‡∏ß‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏ô Grid)
def choose_action(grid):
    empty_cells = [(r, c) for r in range(GRID_ROWS) for c in range(GRID_COLS) if grid[r][c] == '0']  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô '?' ‡πÄ‡∏õ‡πá‡∏ô '0'
    if not empty_cells:
        return None  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    r, c = random.choice(empty_cells)
    char = random.choice(['H', 'R', 'G'])  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    return r, c, char

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Q-Table
def update_q_table(state, action, reward, next_state):
    state_str = json.dumps(state)
    action_str = str(tuple(action))
    next_state_str = json.dumps(next_state)
    
    if state_str not in q_table:
        q_table[state_str] = {}
    if action_str not in q_table[state_str]:
        q_table[state_str][action_str] = 0
    
    max_future_q = max(q_table[next_state_str].values(), default=0)
    q_table[state_str][action_str] = (1 - ALPHA) * q_table[state_str][action_str] + ALPHA * (reward + GAMMA * max_future_q)

# ‡∏ù‡∏∂‡∏Å AI ‡∏î‡πâ‡∏ß‡∏¢ Reinforcement Learning
best_grid = None
best_score = float('-inf')

for episode in range(EPISODES):
    grid = initialize_grid(GRID_ROWS, GRID_COLS)
    state = grid
    total_reward = 0
    
    reward = 0  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ reward ‡πÄ‡∏õ‡πá‡∏ô 0

    for _ in range(GRID_ROWS * GRID_COLS):
        action = choose_action(grid)
        if action is None:
            reward = calculate_reward(grid)  # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏ï‡πá‡∏°
            break
        r, c, char = action
        grid[r][c] = char
        next_state = grid
        update_q_table(state, action, 0, next_state)  # ‚úÖ ‡πÉ‡∏´‡πâ reward ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏¥‡∏î‡∏à‡∏∞‡πÄ‡∏ï‡πá‡∏°
        state = next_state

    reward = calculate_reward(grid)  # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    total_reward = reward

    if total_reward > best_score:
        best_score = total_reward
        best_grid = [row[:] for row in grid]

    if (episode + 1) % 2500 == 0:
        print(f"Episode {episode + 1}/{EPISODES}, Reward: {total_reward}")

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Q-Table
save_q_table(q_table)

print("üéØ AI Training Completed! Q-Table Saved.")
print(f"üèÜ Best Score: {best_score}")
print("üèÜ Best Grid Layout:")
for row in best_grid:
    print(" ".join(row))
