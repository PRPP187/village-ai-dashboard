import streamlit as st
import numpy as np
import pandas as pd
import random
import io
import sys
from jecsun import initialize_grid, load_or_initialize_grid, train_ai, apply_house_types, analyze_profit, GRID_ROWS, GRID_COLS, E_START_POSITION, EPISODES, csv_folder, measure_execution_time

st.set_page_config(page_title="AI ‡∏ú‡∏±‡∏á‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô", layout="wide")
st.title("\U0001F3D8Ô∏è AI ‡∏ß‡∏≤‡∏á‡∏ú‡∏±‡∏á‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ Q-Learning")

# --- Sidebar ---
st.sidebar.header("\U0001F527 ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°")
rows = st.sidebar.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß (rows)", 3, 10, GRID_ROWS)
cols = st.sidebar.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (cols)", 3, 10, GRID_COLS)
e_row = st.sidebar.number_input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á E (1-based)", 1, rows, E_START_POSITION[0])
e_col = st.sidebar.number_input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á E (1-based)", 1, cols, E_START_POSITION[1])
e_position = (e_row, e_col)
green_ratio_min = st.sidebar.slider("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (%)", 0, 50, 10)

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏™‡∏î‡∏á Grid ---
def render_colored_grid(grid, title):
    st.subheader(title)
    color_map = {
        'E': '#FFD700',  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏≠‡∏á
        'R': '#A9A9A9',  # ‡πÄ‡∏ó‡∏≤
        'G': '#98FB98',  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
        'H': '#FFB6C1',  # ‡∏ä‡∏°‡∏û‡∏π
        'H1': '#FFA07A',
        'H2': '#F08080',
        'H3': '#FA8072',
        'H4': '#E9967A',
        '0': '#F0F0F0',
    }
    html = "<table style='border-collapse: collapse;'>"
    for row in grid:
        html += "<tr>"
        for cell in row:
            color = color_map.get(cell, '#FFFFFF')
            html += f"<td style='border: 1px solid black; background-color: {color}; width: 40px; height: 40px; text-align: center;'>{cell}</td>"
        html += "</tr>"
    html += "</table>"
    st.markdown(html, unsafe_allow_html=True)

# --- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å AI ---
if st.sidebar.button("\U0001F680 ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å AI"):
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Grid..."):
        grid, new_e = initialize_grid(rows, cols, e_position)
        grid, _ = load_or_initialize_grid(csv_folder, rows, cols, new_e)
    
    st.success(f"‡πÇ‡∏´‡∏•‡∏î Grid ‡∏Ç‡∏ô‡∏≤‡∏î {rows}x{cols} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß | E ‡∏ó‡∏µ‡πà {new_e}")
    render_colored_grid(grid, "\U0001F4CC ‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Å‡πà‡∏≠‡∏ô‡∏ù‡∏∂‡∏Å AI)")

    with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å AI..."):
        best_grid, best_score, exec_time = measure_execution_time(train_ai, EPISODES, grid)

    final_grid = apply_house_types([row[:] for row in best_grid])

    render_colored_grid(best_grid, "\U0001F3C6 ‡∏ú‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà AI ‡∏´‡∏≤‡πÑ‡∏î‡πâ")
    st.success(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {best_score}")
    st.info(f"‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ù‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {exec_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

    render_colored_grid(final_grid, "\U0001F4CC ‡∏ú‡∏±‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏á H1‚ÄìH4")

    st.subheader("\U0001F4CA ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£")
    buffer = io.StringIO()
    sys.stdout = buffer
    analyze_profit(final_grid)
    sys.stdout = sys.__stdout__
    st.text(buffer.getvalue())

    # --- ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö (mock data) ---
    st.subheader("\U0001F4C8 ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö")
    reward_data = pd.DataFrame({
        'Episode': list(range(1, 51)),
        'Score': [random.randint(200, best_score) for _ in range(50)]
    })
    st.line_chart(reward_data.set_index('Episode'))

    st.balloons()
else:
    st.info("üëà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏î '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å AI'")
