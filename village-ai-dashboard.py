import streamlit as st
import numpy as np
import pandas as pd
import random
from jecsuN import initialize_grid, load_or_initialize_grid, train_ai, apply_house_types, analyze_profit, GRID_ROWS, GRID_COLS, E_START_POSITION, EPISODES, csv_folder

st.set_page_config(page_title="AI ‡∏ú‡∏±‡∏á‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô", layout="wide")
st.title("üèòÔ∏è AI ‡∏ß‡∏≤‡∏á‡∏ú‡∏±‡∏á‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ Q-Learning")

# --- Sidebar ---
st.sidebar.header("üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°")
rows = st.sidebar.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß (rows)", 3, 10, GRID_ROWS)
cols = st.sidebar.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (cols)", 3, 10, GRID_COLS)
e_row = st.sidebar.number_input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á E (1-based)", 1, rows, E_START_POSITION[0])
e_col = st.sidebar.number_input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á E (1-based)", 1, cols, E_START_POSITION[1])
e_position = (e_row, e_col)

if st.sidebar.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å AI"):
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Grid..."):
        grid, new_e = initialize_grid(rows, cols, e_position)
        grid, _ = load_or_initialize_grid(csv_folder, rows, cols, new_e)

    st.success(f"‡πÇ‡∏´‡∏•‡∏î Grid ‡∏Ç‡∏ô‡∏≤‡∏î {rows}x{cols} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß | E ‡∏ó‡∏µ‡πà {new_e}")

    st.subheader("üìå ‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Å‡πà‡∏≠‡∏ô‡∏ù‡∏∂‡∏Å AI)")
    st.dataframe(pd.DataFrame(grid))

    with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å AI..."):
        best_grid, best_score = train_ai(EPISODES, grid)

    final_grid = apply_house_types([row[:] for row in best_grid])

    st.subheader("üèÜ ‡∏ú‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà AI ‡∏´‡∏≤‡πÑ‡∏î‡πâ")
    st.dataframe(pd.DataFrame(best_grid))
    st.success(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {best_score}")

    st.subheader("üìå ‡∏ú‡∏±‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏á H1‚ÄìH4")
    st.dataframe(pd.DataFrame(final_grid))

    st.subheader("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£")
    with st.redirect_stdout():
        analyze_profit(final_grid)

    st.balloons()
else:
    st.info("üëà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏î '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å AI'")
