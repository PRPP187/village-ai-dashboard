# =========================================================
# üìå 1Ô∏è‚É£ Import Library ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
# =========================================================
import numpy as np
import random
import json
import os
import ast
import glob
import pandas as pd
from collections import deque
import time
import threading
import shutil
from filelock import FileLock
import requests
import copy
import hashlib
import heapq
import psutil
from concurrent.futures import ThreadPoolExecutor
from multiprocessing import Pool, cpu_count
import multiprocessing
import sqlite3
from tabulate import tabulate
from flask import Flask, request, jsonify  # ‚úÖ Import Flask components
from collections import defaultdict
from scipy.ndimage import label

# =========================================================
# üìå 2Ô∏è‚É£ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á AI
# =========================================================
# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
grid_sizes = [(3, 3), (4, 3), (3, 4), (4, 4)]

EPISODES = 10

ALPHA_START = 0.1
ALPHA_END = 0.01
ALPHA_DECAY_RATE = 0.001
GAMMA = 0.9
EPSILON_START = 0.7  # ‚úÖ ‡∏•‡∏î‡∏•‡∏á‡∏à‡∏≤‡∏Å 1.0 ‡πÄ‡∏õ‡πá‡∏ô 0.5
EPSILON_END = 0.01    # ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á epsilon
EPSILON_DECAY = 0.95 # ‚úÖ ‡∏•‡∏î‡∏ä‡πâ‡∏≤‡∏•‡∏á

SCORES = {'E': 50, 'G': 15, 'H': 20, 'R': 10, '0': -50}

Q_TABLE_FILE = "q_table.json"
conn = sqlite3.connect("q_table.db", check_same_thread=False)
cursor = conn.cursor()

q_table_lock = threading.Lock()  # ‚úÖ ‡πÉ‡∏ä‡πâ Lock ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
LOCK_FILE = "q_table.lock"  # ‚úÖ ‡πÉ‡∏ä‡πâ Lock ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
# üîπ ‡πÉ‡∏ä‡πâ Lock ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô

last_load_time = time.time()
last_update_time = time.time() 
last_q_table_hash = ""
# üîπ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

q_table = {}
# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Q-Table (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô load_q_table)

conn = sqlite3.connect("q_table.db", check_same_thread=False)
cursor = conn.cursor()

# ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ Q-Table ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ state, action, q_value
for state, actions in q_table.items():
    for action, q_value in actions.items():
        cursor.execute("INSERT OR REPLACE INTO q_table (state_key, action_key, q_value) VALUES (?, ?, ?)",
                       (str(state), str(action), q_value))

conn.commit()
conn.close()

app = Flask(__name__)  # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask Application
@app.route('/update_q_table', methods=['POST'])

# =========================================================
# üìå 3Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Grid (‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á, ‡πÇ‡∏´‡∏•‡∏î, ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
# =========================================================
def load_or_create_grid(rows, cols, e_position=(1, 1), csv_folder="data/maps/CSV/goodcsv"):
    """ ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Grid ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ """
    print(f"\nüîπ [STEP] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î/‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏Ç‡∏ô‡∏≤‡∏î {rows}x{cols}, ‡∏ß‡∏≤‡∏á `E` ‡∏ó‡∏µ‡πà {e_position}")
    
    csv_files = glob.glob(f"{csv_folder}/**/*.csv", recursive=True)
    best_grid = None
    best_score = float('-inf')

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for file in csv_files:
        df = pd.read_csv(file, header=None)
        if df.shape == (rows, cols) and 'E' in df.values:
            grid_from_csv = df.astype(str).values.tolist()
            score = calculate_reward_verbose(grid_from_csv)  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

            # ‚úÖ ‡πÉ‡∏ä‡πâ Grid ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            if score > best_score:
                best_score = score
                best_grid = grid_from_csv

    if best_grid is not None:
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î Grid ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å CSV (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {best_score})")
        print_grid(best_grid)  # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Grid ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
        return best_grid

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Grid ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ Grid ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà {rows}x{cols}")
    grid = [['0' for _ in range(cols)] for _ in range(rows)]
    r, c = min(e_position[0], rows-1), min(e_position[1], cols-1)
    grid[r][c] = 'E'
    
    print(f"‚úÖ Grid ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏≤‡∏á `E` ‡∏ó‡∏µ‡πà {e_position}")
    print_grid(grid)  # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Grid ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    return grid

def get_edge_positions(rows, cols):
    """ ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á Grid ‡πÇ‡∏î‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï """
    edge_positions = []
    for r in range(rows):
        for c in range(cols):
            if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:
                if 0 <= r < rows and 0 <= c < cols:  # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    edge_positions.append((r, c))
    return edge_positions

def calculate_reward_verbose(grid):
    """ ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å‡∏ö‡πâ‡∏≤‡∏ô ‡∏ñ‡∏ô‡∏ô ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå """
    
    # ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà Grid ‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á
    if grid is None or len(grid) == 0 or len(grid[0]) == 0:
        print(f"‚ö†Ô∏è Error: grid ‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Grid ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏ó‡∏ô...")
        grid_size = 5
        grid = np.full((grid_size, grid_size), '0')

    grid = np.array(grid)
    rows, cols = grid.shape

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Base Score)
    SCORES = {'H': 50, 'R': 20, 'E': 100, 'G': 10}
    base_score = sum(SCORES.get(cell, 0) for row in grid for cell in row)

    # ‚úÖ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ (Bonus)
    bonus = 0
    bonus_details = {}

    # ‚úÖ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ +50 ‡∏ñ‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô (H) ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö
    h_positions = np.argwhere(grid == 'H')
    edge_houses = np.sum((h_positions[:, 0] == 0) | (h_positions[:, 0] == rows - 1) |
                          (h_positions[:, 1] == 0) | (h_positions[:, 1] == cols - 1))
    bonus_details["H ‡∏ï‡∏¥‡∏î‡∏Ç‡∏≠‡∏ö"] = edge_houses * 50
    bonus += edge_houses * 50

    # ‚úÖ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏à‡∏≤‡∏Å Pattern
    bonus_details["HHH"] = np.sum((grid[:, :-2] == 'H') & (grid[:, 1:-1] == 'H') & (grid[:, 2:] == 'H')) * 100
    bonus_details["RRR"] = np.sum((grid[:, :-2] == 'R') & (grid[:, 1:-1] == 'R') & (grid[:, 2:] == 'R')) * 100
    bonus_details["H-R-H"] = np.sum((grid[:-2, :] == 'H') & (grid[1:-1, :] == 'R') & (grid[2:, :] == 'H')) * 100

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà
    bonus_details["RR-HH"] = np.sum(
        (grid[:-1, :] == 'R') & (grid[1:, :] == 'R') & 
        (grid[:-1, :] == 'H') & (grid[1:, :] == 'H')
    ) * 100

    bonus_details["HR-HR"] = np.sum(
        (grid[:, :-1] == 'H') & (grid[:, 1:] == 'H') & 
        (grid[:, :-1] == 'R') & (grid[:, 1:] == 'R')
    ) * 100

    for k, v in bonus_details.items():
        bonus += v  

    # ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö (Penalty)
    penalty = 0
    penalty_details = {}

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡πâ‡∏≤‡∏ô (`H`) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ñ‡∏ô‡∏ô (`R`) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    h_neighbors_r = np.any([
        np.roll(grid == 'R', shift, axis=axis)[h_positions[:, 0], h_positions[:, 1]]
        for shift, axis in [(1, 0), (-1, 0), (0, 1), (0, -1)]
    ], axis=0)
    num_h_not_connected = np.count_nonzero(~h_neighbors_r)
    penalty_details["H ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô"] = -100 * num_h_not_connected
    penalty -= 300 * num_h_not_connected

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `E` ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô `-1000`
    e_positions = np.argwhere(grid == 'E')
    e_neighbors_r = np.any([
        np.roll(grid == 'R', shift, axis=axis)[e_positions[:, 0], e_positions[:, 1]]
        for shift, axis in [(1, 0), (-1, 0), (0, 1), (0, -1)]
    ], axis=0)
    num_e_not_connected = np.count_nonzero(~e_neighbors_r)
    penalty_details["E ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô"] = -1000 * num_e_not_connected
    penalty -= 1000 * num_e_not_connected

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
    penalty_details["HH-RR"] = -np.sum(
        (grid[:-1, :] == 'H') & (grid[1:, :] == 'H') & 
        (grid[:-1, :] == 'R') & (grid[1:, :] == 'R')
    ) * 50

    penalty_details["RH-RH"] = -np.sum(
        (grid[:, :-1] == 'R') & (grid[:, 1:] == 'R') & 
        (grid[:, :-1] == 'H') & (grid[:, 1:] == 'H')
    ) * 50

    penalty += penalty_details["HH-RR"]
    penalty += penalty_details["RH-RH"]

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
    total_score = base_score + bonus + penalty
    print(f"üéØ Debug: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Grid = {total_score} (Base: {base_score}, Bonus: {bonus}, Penalty: {penalty})")

    return total_score

def count_r_clusters(grid, use_dfs=False):
    """ ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á 'R' ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î BFS ‡∏´‡∏£‡∏∑‡∏≠ DFS """
    GRID_ROWS, GRID_COLS = len(grid), len(grid[0])  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    visited = [[False] * GRID_COLS for _ in range(GRID_ROWS)]  # ‚úÖ ‡πÉ‡∏ä‡πâ List ‡πÅ‡∏ó‡∏ô Set
    clusters = 0

    def bfs(r, c):
        """ ‚úÖ BFS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ Cluster """
        queue = deque([(r, c)])
        visited[r][c] = True
        while queue:
            x, y = queue.popleft()
            for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:  # 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
                nx, ny = x + dx, y + dy
                if 0 <= nx < GRID_ROWS and 0 <= ny < GRID_COLS and not visited[nx][ny] and grid[nx][ny] == 'R':
                    visited[nx][ny] = True
                    queue.append((nx, ny))

    def dfs(r, c):
        """ ‚úÖ DFS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ Cluster """
        stack = [(r, c)]
        visited[r][c] = True
        while stack:
            x, y = stack.pop()
            for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < GRID_ROWS and 0 <= ny < GRID_COLS and not visited[nx][ny] and grid[nx][ny] == 'R':
                    visited[nx][ny] = True
                    stack.append((nx, ny))

    search_func = dfs if use_dfs else bfs  # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å BFS ‡∏´‡∏£‡∏∑‡∏≠ DFS

    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'R' and not visited[r][c]:
                clusters += 1
                search_func(r, c)  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ BFS ‡∏´‡∏£‡∏∑‡∏≠ DFS

    return clusters

def train_grid_size(grid_size):
    """ ‚úÖ ‡∏ù‡∏∂‡∏Å AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î Grid ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î """
    GRID_ROWS, GRID_COLS = grid_size

    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÉ‡∏´‡∏°‡πà
    grid = load_or_create_grid(GRID_ROWS, GRID_COLS)

    # ‚úÖ ‡πÉ‡∏ä‡πâ Parallel Processing ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ `E`
    best_results = {}
    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            e_position = (r, c)
            temp_grid = copy.deepcopy(grid)
            temp_grid[r][c] = 'E'  # ‚úÖ ‡∏ß‡∏≤‡∏á `E` ‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
            best_results[e_position] = measure_execution_time(train_ai, EPISODES, temp_grid, e_position)

    return best_results

# =========================================================
# üìå 4Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Q-Table (‡πÇ‡∏´‡∏•‡∏î, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï, ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå)
# =========================================================
def load_q_table():
    """ ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Q-Table ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ """
    global q_table
    q_table = {}

    try:
        conn = sqlite3.connect("q_table.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT state_key, action_key, q_value FROM q_table")
        rows = cursor.fetchall()
        conn.close()

        for state_key, action_key, q_value in rows:
            try:
                state_key = json.loads(state_key)  # ‚úÖ ‡πÉ‡∏ä‡πâ JSON ‡πÅ‡∏ó‡∏ô eval() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                action_key = json.loads(action_key) if isinstance(action_key, str) else action_key

                if isinstance(state_key, list):  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô list ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô tuple
                    state_key = tuple(map(tuple, state_key))

                if state_key not in q_table:
                    q_table[state_key] = {}
                q_table[state_key][action_key] = q_value
            except Exception as e:
                print(f"‚ö†Ô∏è [AI] Error ‡πÅ‡∏õ‡∏•‡∏á state_key: {state_key} -> {e}")

        print(f"‚úÖ [AI] Q-Table Loaded from SQLite: {len(q_table)} states")

    except sqlite3.Error as e:
        print(f"‚ö†Ô∏è [AI] SQLite Error: {e}")
        q_table = {}  # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ dictionary ‡∏ß‡πà‡∏≤‡∏á

def update_q_table(state, action, reward, next_state, episode):
    """ ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Q-Table ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö key ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï """
    print(f"\nüîπ [STEP] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Q-Table (Episode {episode})")

    state_key = tuple(map(tuple, state.tolist() if isinstance(state, np.ndarray) else state))
    next_state_key = tuple(map(tuple, next_state.tolist() if isinstance(next_state, np.ndarray) else next_state))
    action_key = tuple(action) if isinstance(action, (list, np.ndarray)) else action

    alpha = max(ALPHA_END, ALPHA_START / (1 + episode * ALPHA_DECAY_RATE))

    with q_table_lock:
        if state_key not in q_table:
            q_table[state_key] = {}

        if action_key not in q_table[state_key]:
            q_table[state_key][action_key] = 0  

        max_future_q = max(q_table.get(next_state_key, {}).values(), default=0)
        old_q_value = q_table[state_key][action_key]
        new_q_value = (1 - alpha) * old_q_value + alpha * (reward + GAMMA * max_future_q)
        q_table[state_key][action_key] = round(new_q_value, 4)  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

        print(f"üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Q-Table: State = {state_key[:30]}... | Action = {action_key} | Old Q = {old_q_value:.4f} ‚Üí New Q = {q_table[state_key][action_key]:.4f}")

        print(f"üîç ‡∏Å‡πà‡∏≠‡∏ô Clean: Q-Table ‡∏°‡∏µ {len(q_table)} states")
        # ‚úÖ Clean Q-Table ‡∏ó‡∏∏‡∏Å 500 Episodes
        if episode % 500 == 0:
            print(f"üîç Clean Q-Table ‡∏ó‡∏∏‡∏Å 500 Episodes (Episode {episode})")
            clean_q_table()
        print(f"üîç ‡∏´‡∏•‡∏±‡∏á Clean: Q-Table ‡∏°‡∏µ {len(q_table)} states")

def send_q_table_to_server():
    """ ‚úÖ ‡∏™‡πà‡∏á Q-Table ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Flask """
    url = "http://127.0.0.1:5000/update_q_table"

    if not q_table:  
        print("‚ö†Ô∏è [AI] Q-Table ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        return

    print(f"üì§ [AI] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Q-Table ‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ {len(q_table)} states)")

    with q_table_lock:
        try:
            q_table_serializable = [
                {"state_key": json.dumps(state), "action_key": json.dumps(action), "q_value": q_value}
                for state, actions in q_table.items()
                for action, q_value in actions.items()
            ]
        except Exception as e:
            print(f"‚ö†Ô∏è [AI] ERROR: ‡πÅ‡∏õ‡∏•‡∏á Q-Table ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return

    try:
        response = requests.post(url, json=q_table_serializable, timeout=10)
        response.raise_for_status()
        print(f"‚úÖ [AI] Q-Table Sent | Server Response: {response.json()}")  
    except requests.exceptions.Timeout:
        print("‚ö†Ô∏è [AI] ERROR: Timeout! ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ")
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è [AI] ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (Connection Error)")
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è [AI] ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Q-Table ‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {e}")
    except json.JSONDecodeError:
        print("‚ö†Ô∏è [AI] ERROR: ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

def update_q_table_server():
    global q_table

    new_q_table = request.get_json()
    episode = request.args.get("episode", type=int)  # ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ episode ‡∏à‡∏≤‡∏Å request

    if not new_q_table:
        return jsonify({"status": "error", "message": "Received empty Q-Table"}), 400

    print(f"üîç ‡∏Å‡πà‡∏≠‡∏ô Clean: Q-Table ‡∏°‡∏µ {len(q_table)} states")
    
    # ‚úÖ Clean Q-Table ‡∏ó‡∏∏‡∏Å 500 Episodes
    if episode and episode % 500 == 0:
        print(f"üîç Clean Q-Table ‡∏ó‡∏∏‡∏Å 500 Episodes (Episode {episode})")
        clean_q_table()

    print(f"üîç ‡∏´‡∏•‡∏±‡∏á Clean: Q-Table ‡∏°‡∏µ {len(q_table)} states")

def batch_update_q_table(stop_event):
    global last_q_table_hash
    while not stop_event.is_set():
        time.sleep(30)  # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏õ‡πá‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

        with q_table_lock:
            q_table_copy = dict(q_table)

        try:
            q_table_hash = hashlib.md5(json.dumps(q_table_copy, sort_keys=True).encode()).hexdigest()

            if q_table_hash == last_q_table_hash:
                print("‚ö†Ô∏è [Batch Update] Q-Table ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
                continue

            print(f"üíæ [Batch Update] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Q-Table ({len(q_table_copy)} states)")

            with FileLock(LOCK_FILE, timeout=10):  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                with open(Q_TABLE_FILE, "w") as f:
                    json.dump(q_table_copy, f)

            last_q_table_hash = q_table_hash
            print(f"‚úÖ [Batch Update] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à ({len(q_table_copy)} states)")

        except TimeoutError:
            print("‚ùå [Batch Update] ERROR: Timeout acquiring file lock! ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Deadlock")
        except Exception as e:
            print(f"‚ùå [Batch Update] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")

def check_memory_before_training():
    mem = psutil.virtual_memory()
    print(f"üõë Memory Usage: {mem.percent}% | Available: {mem.available / 1e6} MB")
    
    if mem.available < 4 * 1024 * 1024 * 1024:  # ‚úÖ RAM ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 4GB ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
        print("‚ùå RAM ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å AI")
        exit(1)  # ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°

def check_q_table_size():
    """ ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô state ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Q-Table """
    conn, cursor = get_db_connection()

    cursor.execute("SELECT COUNT(*) FROM q_table")
    num_states = cursor.fetchone()[0]

    cursor.execute("SELECT DISTINCT state_key FROM q_table")
    state_keys = cursor.fetchall()

    grid_sizes = set()
    for key in state_keys:
        try:
            grid_size = eval(key[0])  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á string ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô tuple
            grid_sizes.add(grid_size)
        except:
            pass  # ‡∏Ç‡πâ‡∏≤‡∏° state ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥

    conn.close()  # ‚úÖ ‡∏õ‡∏¥‡∏î Connection ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    print(f"üìå Q-Table ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {num_states} states")
    print(f"üìå Grid ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î: {sorted(grid_sizes) if grid_sizes else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}")

def check_q_table():
    conn, cursor = get_db_connection()
    cursor.execute("SELECT COUNT(*) FROM q_table")
    num_records = cursor.fetchone()[0]
    conn.close()
    print(f"üìå Q-Table ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {num_records} records")

def print_grid(grid):
    """ ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Grid ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© """
    for row in grid:
        print(" ".join(row))  # ‚úÖ ‡πÉ‡∏ä‡πâ " " ‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    print()  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Grid ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö

def get_db_connection():
    """ ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Database Connection ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ã‡πâ‡∏≥ """
    conn = sqlite3.connect("q_table.db", check_same_thread=False)
    cursor = conn.cursor()
    return conn, cursor

def clean_q_table():
    """ ‚úÖ ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ threshold ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Q-Table ‡πÇ‡∏î‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid """
    global q_table  

    if not q_table:
        print("‚ö†Ô∏è Q-Table ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤! ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏≤‡∏á")
        return

    # ‚úÖ 1. ‡πÅ‡∏¢‡∏Å Q-values ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î
    grid_q_values = {}
    
    for state, actions in q_table.items():
        grid_size = (len(state), len(state[0]))  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid
        max_q_value = max(actions.values(), default=0)
        
        if grid_size not in grid_q_values:
            grid_q_values[grid_size] = []
        grid_q_values[grid_size].append(max_q_value)

    # ‚úÖ 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì threshold ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid
    thresholds = {
        grid_size: np.percentile(np.array(q_values), 35) if q_values else float('-inf')
        for grid_size, q_values in grid_q_values.items()
    }

    # ‚úÖ 3. ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ threshold ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î Grid ‡∏ô‡∏±‡πâ‡∏ô ‡πÜ
    q_table_keys = list(q_table.keys())  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö key ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á loop
    deleted_count = 0  # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô states ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö

    for key in q_table_keys:
        grid_size = (len(key), len(key[0]))  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid
        threshold = thresholds.get(grid_size, float('-inf'))
        q_values = np.fromiter(q_table[key].values(), dtype=float)

        if np.mean(q_values) < threshold:  # ‚úÖ ‡πÉ‡∏ä‡πâ mean ‡πÅ‡∏ó‡∏ô max
            del q_table[key]
            deleted_count += 1  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö states ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö

    print(f"‚úÖ Q-Table Cleaned: ‡∏•‡∏ö {deleted_count} states ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ threshold ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î, ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {len(q_table)} states")

# =========================================================
# üìå 5Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Action
# =========================================================
def get_state(grid, r, c, size=3):
    """
    ‚úÖ ‡∏î‡∏∂‡∏á‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î `size x size` ‡∏£‡∏≠‡∏ö‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á
    ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà 'X'
    """
    half = size // 2
    state = []
    for i in range(-half, half+1):
        row = []
        for j in range(-half, half+1):
            nr, nc = r + i, c + j
            if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]):
                row.append(grid[nr][nc])
            else:
                row.append("X")  # ‚úÖ ‡πÉ‡∏™‡πà 'X' ‡πÅ‡∏ó‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≠‡∏Å‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
        state.append(tuple(row))
    return tuple(state)

def choose_action(grid, e_position, epsilon=0.1):
    """ ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á‡πÅ‡∏ö‡∏ö BFS (‡∏à‡∏¥‡πä‡∏Å‡∏ã‡∏≠) ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î """
    if not isinstance(grid, np.ndarray):
        grid = np.array(grid)

    rows, cols = grid.shape
    visited = set()
    queue = deque([e_position])
    build_order = []

    while queue:
        r, c = queue.popleft()
        if (r, c) in visited:
            continue
        visited.add((r, c))

        if grid[r, c] == '0':
            build_order.append((r, c))

        for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited:
                queue.append((nr, nc))

    if not build_order:
        return None  # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å action ‡πÉ‡∏´‡∏°‡πà

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á Exploration (‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    if random.random() < epsilon:
        r, c = random.choice(build_order)
        chosen = random.choices(['H', 'R', 'G'], weights=[0.5, 0.3, 0.2])[0]  # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        return r, c, chosen

    # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Q-Table ‡∏´‡∏£‡∏∑‡∏≠ Reward System ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
    best_score = float('-inf')
    best_choice = None
    best_position = None

    for r, c in build_order:
        for option in ['H', 'R', 'G']:
            temp_grid = grid.copy()
            temp_grid[r, c] = option  # ‚úÖ ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ß‡∏≤‡∏á

            # ‚úÖ ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å calculate_reward_verbose() ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            score = calculate_reward_verbose(temp_grid)  

            if score > best_score:
                best_score = score
                best_choice = option
                best_position = (r, c)

    return best_position[0], best_position[1], best_choice if best_choice else random.choice(['H', 'R', 'G'])

def validate_final_grid(grid):
    """ ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏±‡∏á‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç """
    grid = np.array(grid)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ñ‡∏ô‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÄ‡∏™‡πâ‡∏ô
    roads_exist = np.sum(grid == 'R') > 0
    if not roads_exist:
        return False

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ä‡πà‡∏≠‡∏á
    houses = np.argwhere(grid == 'H')
    for r, c in houses:
        if not ((r > 0 and grid[r-1, c] == 'R') or 
                (r < grid.shape[0]-1 and grid[r+1, c] == 'R') or
                (c > 0 and grid[r, c-1] == 'R') or 
                (c < grid.shape[1]-1 and grid[r, c+1] == 'R') or
                (r > 1 and grid[r-2, c] == 'R') or
                (r < grid.shape[0]-2 and grid[r+2, c] == 'R') or
                (c > 1 and grid[r, c-2] == 'R') or 
                (c < grid.shape[1]-2 and grid[r, c+2] == 'R')):
            return False  # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False

    return True  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ Grid ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ

def get_empty_cells(grid):
    """ ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô '0' (‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á) ‡πÉ‡∏ô grid """
    return [(r, c) for r in range(len(grid)) for c in range(len(grid[0])) if grid[r][c] == '0']

# =========================================================
# üìå 6Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Train AI
# =========================================================
def get_neighbors(grid, r, c, visited=None):
    """ ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏≠‡∏ö‡πÜ ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ """
    if grid is None:
        print(f"‚ö†Ô∏è Error: grid ‡πÄ‡∏õ‡πá‡∏ô None ‡πÉ‡∏ô get_neighbors()! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Grid ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏ó‡∏ô...")
        return []

    if visited is None:
        visited = set()

    neighbors = []
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    for dr, dc in directions:
        nr, nc = r + dr, c + dc
        if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (nr, nc) not in visited:
            if grid[nr][nc] == '0':
                neighbors.append((nr, nc))

    return neighbors

def train_ai(episodes, grid, e_position):
    """ ‚úÖ AI ‡∏ù‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏° Grid ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û """
    
    if not isinstance(grid, np.ndarray):
        grid = np.array(grid)  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numpy array ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà

    best_grid = None
    best_score = float('-inf')
    episode_scores = []  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ episode

    print("\n" + "="*50)
    print("üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å AI...")
    print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Episodes: {episodes}")
    print(f"üìê ‡∏Ç‡∏ô‡∏≤‡∏î Grid: {grid.shape}")
    print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á E: {e_position}")
    print("="*50 + "\n")

    for episode in range(episodes):
        print(f"\nüîπ Episode {episode + 1}/{episodes}")
        state = grid.copy()  # ‚úÖ ‡πÉ‡∏ä‡πâ copy() ‡πÅ‡∏ó‡∏ô deepcopy() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤

        # ‚úÖ ‡∏ñ‡πâ‡∏≤ E ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
        if state[e_position] != 'E':
            state[e_position] = 'E'  

        empty_cells = np.argwhere(state == '0')  # ‚úÖ ‡πÉ‡∏ä‡πâ NumPy ‡∏´‡∏≤ index ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        np.random.shuffle(empty_cells)  # ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô

        placed_buildings = {'H': 0, 'R': 0, 'G': 0}  # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á

        for r, c in empty_cells:
            action = choose_action(state, e_position)  # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å action

            if action:
                r, c, char = action
            else:
                char = np.random.choice(['H', 'R', 'G'], p=[0.5, 0.3, 0.2])  # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏∏‡πà‡∏°

            state[r, c] = char  # ‚úÖ ‡∏ß‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
            placed_buildings[char] += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á
            next_state = state.copy()  # ‚úÖ ‡πÉ‡∏ä‡πâ copy() ‡πÅ‡∏ó‡∏ô deepcopy()
            reward = calculate_reward_verbose(state)
            update_q_table(state, (r, c, char), reward, next_state, episode)

        total_reward = calculate_reward_verbose(state)
        episode_scores.append(total_reward)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á episode ‡∏ô‡∏µ‡πâ

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ
        print(f"EP {episode + 1} E{e_position} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Grid = {total_reward} (Base: {total_reward - reward}, Bonus: {reward}, Penalty: {total_reward - reward - reward})")

        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if total_reward < -1000:
            print(f"‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å! ({total_reward})")
        elif total_reward > 0:
            print(f"‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ! ({total_reward})")

        if placed_buildings['R'] == 0:
            print(f"‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏ñ‡∏ô‡∏ô!")
        elif placed_buildings['H'] == 0:
            print(f"‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏ö‡πâ‡∏≤‡∏ô!")
        elif placed_buildings['G'] == 0:
            print(f"‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß!")

        if total_reward > best_score or best_grid is None:
            best_score = total_reward
            best_grid = state.copy()
            print(f"   üéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {best_score}")

        # ‚úÖ ‡∏™‡πà‡∏á Q-Table ‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å 10 EPISODES ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if episode % 10 == 0:
            send_q_table_to_server()

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    print("\n" + "="*50)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Episodes: {episodes}")
    print(f"   - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {sum(episode_scores)/len(episode_scores):.2f}")
    print(f"   - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {max(episode_scores)}")
    print(f"   - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {min(episode_scores)}")
    print(f"   - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡∏•‡∏≠‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å: {best_score}")
    print("\nüéØ Grid ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
    for row in best_grid:
        print("     " + " ".join(row))
    print("="*50 + "\n")

    return best_grid, best_score

def train_grid(grid_size, epsilon):
    """ ‚úÖ ‡∏ù‡∏∂‡∏Å AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î Grid ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î """
    rows, cols = grid_size
    e_positions = get_edge_positions(rows, cols)  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á `E` ‡∏Å‡πà‡∏≠‡∏ô

    best_results = {}
    for e_position in e_positions:
        grid = load_or_create_grid(rows, cols, e_position)  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° `e_position` ‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î Grid
        best_results[e_position] = train_ai(EPISODES, grid, e_position)

    return best_results

def train_grid_wrapper(size, epsilon):
    return train_grid(size, epsilon)

def train_ai_parallel(grid_sizes):
    num_workers = min(4, cpu_count() // 2)  # ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4 Core
    with multiprocessing.Pool(processes=num_workers) as pool:
        results = pool.starmap(train_grid_wrapper, [(size, EPSILON_START) for size in grid_sizes])

    best_results = {}

    for size, result in zip(grid_sizes, results):
        best_results[size] = {}

        for e_position, grid_info in result.items():
            if isinstance(grid_info, tuple) and len(grid_info) == 2:
                best_grid, best_score = grid_info

                if best_grid is None or not isinstance(best_grid, (list, np.ndarray)):
                    print(f"‚ö†Ô∏è Warning: best_grid ‡πÄ‡∏õ‡πá‡∏ô None, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...")
                    best_grid = [["H" if (i+j) % 3 == 0 else "R" if (i+j) % 3 == 1 else "G" for j in range(size[1])] for i in range(size[0])]

                if any('0' in row for row in best_grid):
                    print(f"‚ö†Ô∏è Warning: best_grid ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...")
                    best_grid = np.where(np.array(best_grid) == '0', np.random.choice(['H', 'R', 'G']), best_grid)

                if best_grid[e_position[0]][e_position[1]] != 'E':
                    print(f"‚ö†Ô∏è Warning: best_grid ‡πÑ‡∏°‡πà‡∏°‡∏µ `E`, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...")
                    best_grid[e_position[0]][e_position[1]] = 'E'

                best_results[size][e_position] = (best_grid, best_score)

    return best_results

# =========================================================
# üìå 7Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debugging)
# =========================================================
def measure_execution_time(function, *args, **kwargs):
    start_time = time.time()
    result = function(*args, **kwargs)  # ‚úÖ ‡πÉ‡∏ä‡πâ *args ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö argument ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
    elapsed_time = time.time() - start_time
    print(f"\n‚è≥ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {elapsed_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    return result, elapsed_time

# =========================================================
# üìå 8Ô∏è‚É£ ‡∏™‡πà‡∏ß‡∏ô `main()` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
# =========================================================

if __name__ == "__main__":
    start_time = time.perf_counter()  # ‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤

    check_memory_before_training()  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ù‡∏∂‡∏Å AI

    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Q-Table ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    load_q_table()
    if not q_table:
        print("‚ö†Ô∏è Q-Table ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤! AI ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà")
        q_table = {}
    else:
        print(f"‚úÖ Q-Table Loaded: ‡∏°‡∏µ {len(q_table)} states")

    # ‚úÖ Clean Q-Table ‡∏Å‡πà‡∏≠‡∏ô‡∏ù‡∏∂‡∏Å
    print(f"üîç ‡∏Å‡πà‡∏≠‡∏ô Clean: Q-Table ‡∏°‡∏µ {len(q_table)} states")
    clean_q_table()
    print(f"üîç ‡∏´‡∏•‡∏±‡∏á Clean: Q-Table ‡∏°‡∏µ {len(q_table)} states")

    # ‚úÖ ‡∏ù‡∏∂‡∏Å AI ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ù‡∏∂‡∏Å
    print("\nüìå Best Layouts for Each Grid Size:")
    train_start_time = time.perf_counter()
    raw_results = train_ai_parallel(grid_sizes)  # ‚úÖ ‡∏ù‡∏∂‡∏Å AI ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    train_end_time = time.perf_counter()
    train_time = train_end_time - train_start_time  # ‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ù‡∏∂‡∏Å AI

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `train_ai_parallel` ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if not isinstance(raw_results, dict):
        print(f"‚ö†Ô∏è Error: train_ai_parallel() ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î -> {raw_results}")
        raw_results = {size: {} for size in grid_sizes}

    best_results = {}
    for grid_size, result in raw_results.items():
        if isinstance(result, dict):
            best_results[grid_size] = result
        else:
            print(f"‚ö†Ô∏è Warning: train_ai_parallel ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Grid {grid_size} -> {result}")
            best_results[grid_size] = {}

    print(f"üîç Debug: best_results = {best_results}")

    # ‚úÖ ‡∏ñ‡πâ‡∏≤ `best_results` ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if not best_results:
        print("‚ö†Ô∏è Warning: best_results ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...")
        best_results = {size: {} for size in grid_sizes}

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Best Layouts
    for grid_size, best_layout_dict in best_results.items():
        if not isinstance(best_layout_dict, dict):
            print(f"‚ö†Ô∏è Warning: best_results[{grid_size}] ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ -> {best_layout_dict}")
            continue

        print(f"\nüîπ Best Layouts for Grid {grid_size}:")

        for e_position, value in best_layout_dict.items():
            if not isinstance(value, tuple) or len(value) != 2:
                print(f"‚ö†Ô∏è Warning: best_results[{grid_size}][{e_position}] ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ -> {value}")
                continue

            best_grid, best_score = value

            # ‚úÖ ‡∏ñ‡πâ‡∏≤ best_grid ‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            if best_grid is None or not isinstance(best_grid, (list, np.ndarray)) or any('0' in row for row in best_grid):
                print(f"‚ö†Ô∏è Warning: best_grid ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...")
                best_grid = [["H" if (i+j) % 3 == 0 else "R" if (i+j) % 3 == 1 else "G" for j in range(grid_size[1])] for i in range(grid_size[0])]

            # ‚úÖ ‡∏ñ‡πâ‡∏≤ best_grid ‡πÑ‡∏°‡πà‡∏°‡∏µ `E` ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
            if best_grid[e_position[0]][e_position[1]] != 'E':
                print(f"‚ö†Ô∏è Warning: best_grid ‡πÑ‡∏°‡πà‡∏°‡∏µ `E`, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...")
                best_grid[e_position[0]][e_position[1]] = 'E'

            e_position_1based = (e_position[0] + 1, e_position[1] + 1)  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô index ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
            print(f"\nüìå Grid {grid_size}, E at {e_position_1based} | Score: {int(best_score)}")

            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á grid ‡πÄ‡∏õ‡πá‡∏ô string ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            try:
                best_grid_str = "\n".join([" ".join(map(str, row)) for row in best_grid])
            except Exception as e:
                print(f"‚ö†Ô∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á Grid ‡πÄ‡∏õ‡πá‡∏ô String ‡πÑ‡∏î‡πâ -> {e}")
                print(f"üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Grid ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏ó‡∏ô")
                best_grid = [["0" for _ in range(grid_size[1])] for _ in range(grid_size[0])]
                best_grid_str = "\n".join([" ".join(map(str, row)) for row in best_grid])

            print(best_grid_str)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Q-Table ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ù‡∏∂‡∏Å AI ‡πÄ‡∏™‡∏£‡πá‡∏à
    check_start_time = time.perf_counter()
    check_q_table()
    check_end_time = time.perf_counter()
    check_time = check_end_time - check_start_time  # ‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Q-Table

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    end_time = time.perf_counter()
    total_time = end_time - start_time  # ‚è≥ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    print(f"\n‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    print(f"üöÄ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ù‡∏∂‡∏Å AI: {train_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    print(f"üìä ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Q-Table: {check_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
