import numpy as np
from collections import deque

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å)
SCORES_CONFIG = {
    'E': 50,  # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå
    'G': 15,  # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    'H': 20,  # ‡∏ö‡πâ‡∏≤‡∏ô
    'R': 10,  # ‡∏ñ‡∏ô‡∏ô
    '0': -50  # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
}

def get_scores_config():
    """ ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ SCORES_CONFIG ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô """
    return SCORES_CONFIG

def count_r_clusters(grid, use_dfs=False):
    """ ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á 'R' ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î BFS ‡∏´‡∏£‡∏∑‡∏≠ DFS """
    GRID_ROWS, GRID_COLS = len(grid), len(grid[0])  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    visited = [[False] * GRID_COLS for _ in range(GRID_ROWS)]  # ‚úÖ ‡πÉ‡∏ä‡πâ List ‡πÅ‡∏ó‡∏ô Set
    clusters = 0

    def bfs(r, c):
        """ ‚úÖ BFS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ Cluster """
        queue = deque([(r, c)])
        visited[r][c] = True
        while queue:
            x, y = queue.popleft()
            for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:  # 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
                nx, ny = x + dx, y + dy
                if 0 <= nx < GRID_ROWS and 0 <= ny < GRID_COLS and not visited[nx][ny] and grid[nx][ny] == 'R':
                    visited[nx][ny] = True
                    queue.append((nx, ny))

    def dfs(r, c):
        """ ‚úÖ DFS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ Cluster """
        stack = [(r, c)]
        visited[r][c] = True
        while stack:
            x, y = stack.pop()
            for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < GRID_ROWS and 0 <= ny < GRID_COLS and not visited[nx][ny] and grid[nx][ny] == 'R':
                    visited[nx][ny] = True
                    stack.append((nx, ny))

    search_func = dfs if use_dfs else bfs  # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å BFS ‡∏´‡∏£‡∏∑‡∏≠ DFS

    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'R' and not visited[r][c]:
                clusters += 1
                search_func(r, c)  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ BFS ‡∏´‡∏£‡∏∑‡∏≠ DFS

    return clusters

def calculate_reward_verbose(grid):
    """ ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å‡∏ö‡πâ‡∏≤‡∏ô ‡∏ñ‡∏ô‡∏ô ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå """
    
    # ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà Grid ‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á
    if grid is None or len(grid) == 0 or len(grid[0]) == 0:
        print(f"‚ö†Ô∏è Error: grid ‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Grid ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏ó‡∏ô...")
        grid_size = 5
        grid = np.full((grid_size, grid_size), '0')

    grid = np.array(grid)
    rows, cols = grid.shape

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Base Score)
    SCORES = get_scores_config()
    base_score = sum(SCORES.get(cell, 0) for row in grid for cell in row)

    # ‚úÖ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ (Bonus)
    bonus = 0
    bonus_details = {}

    # ‚úÖ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ +50 ‡∏ñ‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô (H) ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö
    h_positions = np.argwhere(grid == 'H')
    edge_houses = np.sum((h_positions[:, 0] == 0) | (h_positions[:, 0] == rows - 1) |
                          (h_positions[:, 1] == 0) | (h_positions[:, 1] == cols - 1))
    bonus_details["H ‡∏ï‡∏¥‡∏î‡∏Ç‡∏≠‡∏ö"] = edge_houses * 50
    bonus += edge_houses * 50

    # ‚úÖ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏à‡∏≤‡∏Å Pattern
    bonus_details["HHH"] = np.sum((grid[:, :-2] == 'H') & (grid[:, 1:-1] == 'H') & (grid[:, 2:] == 'H')) * 100
    bonus_details["RRR"] = np.sum((grid[:, :-2] == 'R') & (grid[:, 1:-1] == 'R') & (grid[:, 2:] == 'R')) * 100
    bonus_details["H-R-H"] = np.sum((grid[:-2, :] == 'H') & (grid[1:-1, :] == 'R') & (grid[2:, :] == 'H')) * 100

    # ‚úÖ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏à‡∏≤‡∏Å Pattern
    bonus_details["RR-HH"] = np.sum(
        (grid[:-1, :] == 'R') & (grid[1:, :] == 'R') & 
        (grid[:-1, :] == 'H') & (grid[1:, :] == 'H')
    ) * 100

    bonus_details["HR-HR"] = np.sum(
        (grid[:, :-1] == 'H') & (grid[:, 1:] == 'H') & 
        (grid[:, :-1] == 'R') & (grid[:, 1:] == 'R')
    ) * 100

    for k, v in bonus_details.items():
        bonus += v  

    # ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö (Penalty)
    penalty = 0
    penalty_details = {}

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡πâ‡∏≤‡∏ô (`H`) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ñ‡∏ô‡∏ô (`R`) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    h_positions = np.argwhere(grid == 'H')
    num_h_not_connected = 0
    
    for r, c in h_positions:
        has_road_neighbor = False
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
        for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and grid[nr,nc] == 'R':
                has_road_neighbor = True
                break
        if not has_road_neighbor:
            num_h_not_connected += 1
    
    penalty_details["H ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô"] = -300 * num_h_not_connected
    penalty -= 300 * num_h_not_connected

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `E` ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô
    e_positions = np.argwhere(grid == 'E')
    num_e_not_connected = 0
    
    for r, c in e_positions:
        has_road_neighbor = False
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
        for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and grid[nr,nc] == 'R':
                has_road_neighbor = True
                break
        if not has_road_neighbor:
            num_e_not_connected += 1
    
    penalty_details["E ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô"] = -1000 * num_e_not_connected
    penalty -= 1000 * num_e_not_connected

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
    r_positions = np.argwhere(grid == 'R')
    num_r_clusters = count_r_clusters(grid)  # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á R ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
    
    if num_r_clusters > 1:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ R ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏Å‡∏•‡∏∏‡πà‡∏°
        penalty_details["R ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô"] = -500 * num_r_clusters  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
        penalty -= 500 * num_r_clusters
    elif num_r_clusters == 0:  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ R ‡πÄ‡∏•‡∏¢
        penalty_details["‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ñ‡∏ô‡∏ô"] = -1000
        penalty -= 1000

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
    penalty_details["HH-RR"] = -np.sum(
        (grid[:-1, :] == 'H') & (grid[1:, :] == 'H') & 
        (grid[:-1, :] == 'R') & (grid[1:, :] == 'R')
    ) * 50

    penalty_details["RH-RH"] = -np.sum(
        (grid[:, :-1] == 'R') & (grid[:, 1:] == 'R') & 
        (grid[:, :-1] == 'H') & (grid[:, 1:] == 'H')
    ) * 50

    penalty += penalty_details["HH-RR"]
    penalty += penalty_details["RH-RH"]

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (G)
    total_cells = rows * cols
    num_green = np.sum(grid == 'G')
    green_ratio = num_green / total_cells

    if green_ratio < 0.05:
        penalty_details["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"] = -500  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö
        penalty -= 500  # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if green_ratio > 0.20:
        penalty_details["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"] = -500  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö
        penalty -= 500  # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
    total_score = base_score + bonus + penalty
    print(f"üéØ Debug: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Grid = {total_score} (Base: {base_score}, Bonus: {bonus}, Penalty: {penalty})")

    return total_score 