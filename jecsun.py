import numpy as np
import random
import json
import os
import ast
import glob
import pandas as pd
from collections import deque
import time

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î Grid
GRID_ROWS = 4
GRID_COLS = 4
EPISODES = 1
ALPHA = 0.1
GAMMA = 0.9
SCORES = {'E': 10, 'G': 10, 'H': 15, 'R': 5, '0': 0}
Q_TABLE_FILE = "q_table.json"
E_START_POSITION = (1, 1)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö (‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô, ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£.‡∏°., market weight)
HOUSE_PRICES = {
    'H1': {'cost': 2_000_000, 'sale': 2_800_000, 'size': 120, 'weight': 1.0},
    'H2': {'cost': 1_800_000, 'sale': 2_500_000, 'size': 100, 'weight': 1.0},
    'H3': {'cost': 2_200_000, 'sale': 2_900_000, 'size': 140, 'weight': 1.1},
    'H4': {'cost': 2_500_000, 'sale': 3_200_000, 'size': 160, 'weight': 0.9},
}

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏à‡∏≤‡∏Å CSV ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
csv_folder = "data/maps/CSV/goodcsv"
csv_files = glob.glob(f"{csv_folder}/**/*.csv", recursive=True)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

def optimize_ratios():
    ratios = {}
    total_score = sum((p['sale'] - p['cost']) * p['weight'] for p in HOUSE_PRICES.values())
    for htype, data in HOUSE_PRICES.items():
        score = (data['sale'] - data['cost']) * data['weight']
        ratios[htype] = score / total_score
    return ratios

H_TYPE_RATIOS = optimize_ratios()

def calculate_reward_verbose(grid):
    # ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ grid ‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á
    if grid is None or len(grid) == 0 or len(grid[0]) == 0:
        print(f"‚ö†Ô∏è Error: grid ‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Grid ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏ó‡∏ô...")
        grid_size = 5
        grid = np.full((grid_size, grid_size), '0')  # ‡πÉ‡∏ä‡πâ NumPy ‡πÅ‡∏ó‡∏ô List

    grid = np.array(grid)
    rows, cols = grid.shape

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    base_score = sum(SCORES.get(cell, 0) for row in grid for cell in row)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏à‡∏≤‡∏Å Pattern
    bonus = 0
    bonus += np.sum((grid[:, :-2] == 'H') & (grid[:, 1:-1] == 'H') & (grid[:, 2:] == 'H')) * 100
    bonus += np.sum((grid[:, :-2] == 'R') & (grid[:, 1:-1] == 'R') & (grid[:, 2:] == 'R')) * 100
    bonus += np.sum((grid[:-2, :] == 'H') & (grid[1:-1, :] == 'R') & (grid[2:, :] == 'H')) * 100
    bonus += np.sum((grid[:-1, :-1] == 'H') & (grid[:-1, 1:] == 'H') &
                    (grid[1:, :-1] == 'R') & (grid[1:, 1:] == 'R')) * 100
    bonus += np.sum((grid[:-1, :-1] == 'R') & (grid[:-1, 1:] == 'R') &
                    (grid[1:, :-1] == 'H') & (grid[1:, 1:] == 'H')) * 100

    # ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö E ‡πÅ‡∏•‡∏∞ R
    penalty = 0
    h_positions = np.argwhere(grid == 'H')
    e_positions = np.argwhere(grid == 'E')

    # ‚úÖ 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ H ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö E ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    #if len(h_positions) > 0 and len(e_positions) > 0:
        #h_neighbors_e = np.sum([
            #np.roll(grid == 'E', shift, axis=axis)[h_positions[:, 0], h_positions[:, 1]]
            #for shift, axis in [(1, 0), (-1, 0), (1, 1), (-1, 1)]
        #], axis=0)
        #penalty -= 100 * np.sum(h_neighbors_e)  # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô H ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î E

    # ‚úÖ 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ E ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î R ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if len(e_positions) > 0:
        e_neighbors_r = np.any([
            np.roll(grid == 'R', shift, axis=axis)[e_positions[:, 0], e_positions[:, 1]]
            for shift, axis in [(1, 0), (-1, 0), (1, 1), (-1, 1)]
        ], axis=0)

        if not np.any(e_neighbors_r):
            penalty -= 200

    # ‚úÖ 3) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° R (‡∏ñ‡∏ô‡∏ô)
    r_clusters = count_r_clusters(grid) if np.any(grid == 'R') else 0
    if r_clusters > 1:
        penalty -= 500 * (r_clusters - 1)

    # ‚úÖ 4) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ H ‡∏ó‡∏∏‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î R ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if len(h_positions) > 0:
        h_neighbors_r = np.any([
            np.roll(grid == 'R', shift, axis=axis)[h_positions[:, 0], h_positions[:, 1]]
            for shift, axis in [(1, 0), (-1, 0), (1, 1), (-1, 1)]
        ], axis=0)

        penalty -= 200 * np.sum(~h_neighbors_r)  # ‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô

        if np.all(h_neighbors_r):  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô ‡πÉ‡∏´‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™
            bonus += 100

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (G)
    total_cells = rows * cols
    num_green = np.sum(grid == 'G')
    green_ratio = num_green / total_cells

    if green_ratio < 0.1:
        penalty -= 500  # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ñ‡∏ô‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    roads_exist = np.sum(grid == 'R') > 0
    if not roads_exist:
        penalty -= 500  # ‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏´‡∏ô‡∏±‡∏Å‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ñ‡∏ô‡∏ô

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
    total_score = base_score + bonus + penalty
    #print(f"üéØ Debug: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Grid = {total_score} (Base: {base_score}, Bonus: {bonus}, Penalty: {penalty})")

    return total_score

def count_r_clusters(grid, use_dfs=False):
    """ ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á 'R' ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î BFS ‡∏´‡∏£‡∏∑‡∏≠ DFS """
    GRID_ROWS, GRID_COLS = len(grid), len(grid[0])  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    visited = [[False] * GRID_COLS for _ in range(GRID_ROWS)]  # ‚úÖ ‡πÉ‡∏ä‡πâ List ‡πÅ‡∏ó‡∏ô Set
    clusters = 0

    def bfs(r, c):
        """ ‚úÖ BFS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ Cluster """
        queue = deque([(r, c)])
        visited[r][c] = True
        while queue:
            x, y = queue.popleft()
            for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:  # 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
                nx, ny = x + dx, y + dy
                if 0 <= nx < GRID_ROWS and 0 <= ny < GRID_COLS and not visited[nx][ny] and grid[nx][ny] == 'R':
                    visited[nx][ny] = True
                    queue.append((nx, ny))

    def dfs(r, c):
        """ ‚úÖ DFS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ Cluster """
        stack = [(r, c)]
        visited[r][c] = True
        while stack:
            x, y = stack.pop()
            for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < GRID_ROWS and 0 <= ny < GRID_COLS and not visited[nx][ny] and grid[nx][ny] == 'R':
                    visited[nx][ny] = True
                    stack.append((nx, ny))

    search_func = dfs if use_dfs else bfs  # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å BFS ‡∏´‡∏£‡∏∑‡∏≠ DFS

    for r in range(GRID_ROWS):
        for c in range(GRID_COLS):
            if grid[r][c] == 'R' and not visited[r][c]:
                clusters += 1
                search_func(r, c)  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ BFS ‡∏´‡∏£‡∏∑‡∏≠ DFS

    return clusters

def apply_house_types(grid):
    # 1. ‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 'H' (‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤)
    h_positions = [(r, c) for r in range(len(grid)) for c in range(len(grid[0])) if grid[r][c] == 'H']
    total_h = len(h_positions)
    if total_h == 0:
        return grid

    # 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡∏à‡∏≤‡∏Å H_TYPE_RATIOS
    house_types_count = {htype: int(ratio * total_h) for htype, ratio in H_TYPE_RATIOS.items()}

    # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    current_total = sum(house_types_count.values())
    while current_total < total_h:
        for htype in house_types_count:
            house_types_count[htype] += 1
            current_total += 1
            if current_total == total_h:
                break

    # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏ä‡πà‡∏ô ['H1', 'H1', 'H2', 'H3', ...]
    house_sequence = []
    for htype, count in house_types_count.items():
        house_sequence.extend([htype] * count)

    # 5. ‡∏ß‡∏≤‡∏á H1‚ÄìH4 ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
    for (r, c), htype in zip(h_positions, house_sequence):
        grid[r][c] = htype

    return grid

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡∏≤‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á E ‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å

def initialize_grid(rows, cols, e_position):
    """ ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô `E` ‡πÑ‡∏õ‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ 1-based index ‡∏ï‡∏•‡∏≠‡∏î) """
    print(f"üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏Ç‡∏ô‡∏≤‡∏î {rows}x{cols} ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á E ‡∏ó‡∏µ‡πà {e_position} (1-based index)")

    grid = [['0' for _ in range(cols)] for _ in range(rows)]  # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏ß‡πà‡∏≤‡∏á
    r, c = e_position  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1-based index ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `E` ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if r == 1 or r == rows or c == 1 or c == cols:
        grid[r-1][c-1] = 'E'  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
    else:
        print(f"‚ö†Ô∏è E ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ({e_position}) ...")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏≠‡∏ö (Top, Bottom, Left, Right)
        distances = {
            "top": r - 1,
            "bottom": rows - r,
            "left": c - 1,
            "right": cols - c
        }

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
        sorted_edges = sorted(distances.items(), key=lambda x: x[1])

        # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        for edge, _ in sorted_edges:
            if edge == "top":
                r = 1
                break
            elif edge == "bottom":
                r = rows
                break
            elif edge == "left":
                c = 1
                break
            elif edge == "right":
                c = cols
                break

        grid[r-1][c-1] = 'E'  # ‚úÖ ‡∏ß‡∏≤‡∏á `E` ‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

    print(f"‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á E: {r}, {c} (1-based index)")
    return grid, (r, c)  # ‚úÖ ‡∏Ñ‡∏∑‡∏ô Grid ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á E (1-based)

def load_or_initialize_grid(csv_folder, rows, cols, e_position):
    """
    ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Grid ‡∏à‡∏≤‡∏Å CSV ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á E ‡πÉ‡∏´‡∏°‡πà
    ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÉ‡∏´‡∏°‡πà
    """
    print(f"üìå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå CSV {rows}x{cols} ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á E: {e_position} (1-based index)")

    csv_files = glob.glob(f"{csv_folder}/**/*.csv", recursive=True)

    if not csv_files:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV! ‡πÉ‡∏ä‡πâ Grid ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ó‡∏ô...")
        return initialize_grid(rows, cols, e_position)  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà

    best_grid = None
    best_score = float('-inf')

    for file in csv_files:
        df = pd.read_csv(file, header=None)

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î Grid
        if df.shape != (rows, cols):
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå {file} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á {df.shape}")
            continue

        grid_from_csv = df.astype(str).values.tolist()
        e_found = [(r+1, c+1) for r in range(len(grid_from_csv)) for c in range(len(grid_from_csv[0])) if grid_from_csv[r][c] == 'E']

        if not e_found or e_found[0] != e_position:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå {file} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á `E` ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á {e_found} (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {e_position})")
            continue

        score = calculate_reward_verbose(grid_from_csv)  # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

        if score > best_score:
            best_score = score
            best_grid = grid_from_csv

    if best_grid is not None:
        print(f"üèÜ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {best_score}")
        return best_grid, e_position  # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1-based index

    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°! ‡πÉ‡∏ä‡πâ Grid ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ó‡∏ô...")
    return initialize_grid(rows, cols, e_position)  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Action ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô)

def choose_action(grid):
    if not grid or not isinstance(grid, list):
        print("‚ö†Ô∏è ERROR: Grid ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Empty or Invalid Format)")
        return None

    rows = len(grid)
    cols = max(len(row) for row in grid)

    empty_cells = [(r, c) for r in range(rows) for c in range(cols) if grid[r][c] == '0']

    if not empty_cells:
        #print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£!")
        return None  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ

    r, c = random.choice(empty_cells)
    char = random.choice(['H', 'R', 'G'])
    return r, c, char

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Q-Table

def update_q_table(state, action, reward, next_state):
    state_str = json.dumps(state)
    action_str = str(tuple(action))
    next_state_str = json.dumps(next_state)

    if state_str not in q_table:
        q_table[state_str] = {}
    if action_str not in q_table[state_str]:
        q_table[state_str][action_str] = 0

    max_future_q = max(q_table.get(next_state_str, {}).values() or [0])
    q_table[state_str][action_str] = (1 - ALPHA) * q_table[state_str][action_str] + ALPHA * (reward + GAMMA * max_future_q)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Train AI (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î grid ‡∏à‡∏£‡∏¥‡∏á)
def train_ai(episodes, grid):
    """
    ‡∏ù‡∏∂‡∏Å AI ‡∏î‡πâ‡∏ß‡∏¢ Reinforcement Learning (Q-Learning) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
    """
    best_grid = None
    best_score = float('-inf')
    action_log = []

    for episode in range(episodes):
        state = [row[:] for row in grid]  # ‡πÉ‡∏ä‡πâ Grid ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å Episode
        rows = len(state)
        cols = len(state[0]) if state else 0
        max_steps = rows * cols

        for step in range(max_steps):
            action = choose_action(state)

            if action is None:
                break

            r, c, char = action
            prev = state[r][c]
            state[r][c] = char
            reward = calculate_reward_verbose(state)
            update_q_table(state, action, reward, state)

            action_log.append(f"EP:{episode+1} STEP:{step+1} ‚û§ ‡∏ß‡∏≤‡∏á '{char}' ‡∏ó‡∏µ‡πà ({r+1},{c+1}) [‡∏à‡∏≤‡∏Å '{prev}'] ‚Üí Reward: {reward}")

        total_reward = calculate_reward_verbose(state)
        if total_reward > best_score:
            best_score = total_reward
            best_grid = [row[:] for row in state]

        if (episode + 1) % 10000 == 0:
            print(f"Episode {episode + 1}/{episodes}, Reward: {total_reward}")

    return best_grid, best_score, action_log

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô

def measure_execution_time(function, *args, **kwargs):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô, ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ)
    """
    start_time = time.time()  # ‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    result = function(*args, **kwargs)  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    end_time = time.time()  # ‚è≥ ‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤

    elapsed_time = end_time - start_time  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    elapsed_minutes = elapsed_time / 60  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ

    print(f"\n‚è≥ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {elapsed_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ({elapsed_minutes:.2f} ‡∏ô‡∏≤‡∏ó‡∏µ)")

    return *result, elapsed_time  # ‚úÖ ‡πÉ‡∏ä‡πâ `*result` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å

def analyze_profit(grid):
    summary = {k: 0 for k in HOUSE_PRICES}
    total_cost = total_sale = total_size = weighted_profit = 0

    for row in grid:
        for cell in row:
            if cell in HOUSE_PRICES:
                info = HOUSE_PRICES[cell]
                summary[cell] += 1
                total_cost += info['cost']
                total_sale += info['sale']
                total_size += info['size']
                weighted_profit += (info['sale'] - info['cost']) * info['weight']

    total_profit = total_sale - total_cost
    avg_profit_per_sqm = total_profit / total_size if total_size else 0

    total_units = sum(summary.values())
    for htype, count in summary.items():
        if count:
            info = HOUSE_PRICES[htype]
            ratio_percent = (count / total_units) * 100
            print(f"üè† {htype}: {count} ‡∏´‡∏•‡∏±‡∏á | {ratio_percent:.1f}% | ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á: {info['cost']:,} ‡∏ö‡∏≤‡∏ó | ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á: {info['sale']:,} ‡∏ö‡∏≤‡∏ó | ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: {info['sale'] * count:,} ‡∏ö‡∏≤‡∏ó")

    print(f"\nüí∏ ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_cost:,} ‡∏ö‡∏≤‡∏ó")
    print(f"üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_sale:,} ‡∏ö‡∏≤‡∏ó")
    print(f"üìà ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_profit:,} ‡∏ö‡∏≤‡∏ó")
    print(f"üìê ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠ ‡∏ï‡∏£.‡∏°.: {avg_profit_per_sqm:,.2f} ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏£.‡∏°.")
    print(f"üéØ ‡∏Å‡∏≥‡πÑ‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° market weight: {weighted_profit:,.2f} ‡∏ö‡∏≤‡∏ó")

# ‚úÖ ‡∏ù‡∏∂‡∏Å AI ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
q_table = {}
grid, new_e_position = initialize_grid(GRID_ROWS, GRID_COLS, E_START_POSITION)
grid, _ = load_or_initialize_grid(csv_folder, GRID_ROWS, GRID_COLS, new_e_position)

print(f"‚úÖ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î: {len(grid)} rows x {len(grid[0]) if grid else 0} cols | ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á E: {new_e_position}")

best_grid, best_score, action_log = train_ai(EPISODES, grid)
final_layout = apply_house_types([row[:] for row in best_grid])

print(f"\nüèÜ Best Layout Found:")
for row in best_grid:
    print(" ".join(row))
print(f"\n‚úÖ Best Score Achieved: {best_score}")

print("\nüìå Final Layout with H1‚ÄìH4:")
for row in final_layout:
    print(" ".join(row))

analyze_profit(final_layout)

print("\nüìú ACTION LOG (AI Placement):")
for log in action_log[-20:]:  # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡πâ‡∏≤‡∏¢ ‡πÜ ‡∏û‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    print(log)
